
embedded-systems-lab-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002908  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a3c  08002a90  08002a90  00003a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080054cc  080054cc  000064cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080054d4  080054d4  000064d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080054d8  080054d8  000064d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000004c  20000000  080054dc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0000704c  2**0
                  CONTENTS
  8 .bss          000004d4  20000050  20000050  00007050  2**3
                  ALLOC
  9 ._user_heap_stack 00000604  20000524  20000524  00007050  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000fb2d  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000025f6  00000000  00000000  00016ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00006cd3  00000000  00000000  0001919f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0001fe72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ee  00000000  00000000  000208d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000215d7  00000000  00000000  000210c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001503b  00000000  00000000  00042697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c441e  00000000  00000000  000576d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011baf0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ce0  00000000  00000000  0011bb34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000050 	.word	0x20000050
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002a78 	.word	0x08002a78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000054 	.word	0x20000054
 80001c4:	08002a78 	.word	0x08002a78

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c8:	b510      	push	{r4, lr}
 80004ca:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000508 <HAL_InitTick+0x40>)
 80004ce:	781a      	ldrb	r2, [r3, #0]
 80004d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80004d8:	4a0c      	ldr	r2, [pc, #48]	@ (800050c <HAL_InitTick+0x44>)
 80004da:	6810      	ldr	r0, [r2, #0]
 80004dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80004e0:	f000 f8ac 	bl	800063c <HAL_SYSTICK_Config>
 80004e4:	b968      	cbnz	r0, 8000502 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004e6:	2c0f      	cmp	r4, #15
 80004e8:	d901      	bls.n	80004ee <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80004ea:	2001      	movs	r0, #1
 80004ec:	e00a      	b.n	8000504 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004ee:	2200      	movs	r2, #0
 80004f0:	4621      	mov	r1, r4
 80004f2:	f04f 30ff 	mov.w	r0, #4294967295
 80004f6:	f000 f891 	bl	800061c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004fa:	4b03      	ldr	r3, [pc, #12]	@ (8000508 <HAL_InitTick+0x40>)
 80004fc:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 80004fe:	2000      	movs	r0, #0
 8000500:	e000      	b.n	8000504 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000502:	2001      	movs	r0, #1
}
 8000504:	bd10      	pop	{r4, pc}
 8000506:	bf00      	nop
 8000508:	20000000 	.word	0x20000000
 800050c:	20000048 	.word	0x20000048

08000510 <HAL_Init>:
{
 8000510:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000512:	4b0b      	ldr	r3, [pc, #44]	@ (8000540 <HAL_Init+0x30>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800051a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000522:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800052a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f863 	bl	80005f8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f7ff ffc8 	bl	80004c8 <HAL_InitTick>
  HAL_MspInit();
 8000538:	f002 f94c 	bl	80027d4 <HAL_MspInit>
}
 800053c:	2000      	movs	r0, #0
 800053e:	bd08      	pop	{r3, pc}
 8000540:	40023c00 	.word	0x40023c00

08000544 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000544:	4a03      	ldr	r2, [pc, #12]	@ (8000554 <HAL_IncTick+0x10>)
 8000546:	6811      	ldr	r1, [r2, #0]
 8000548:	4b03      	ldr	r3, [pc, #12]	@ (8000558 <HAL_IncTick+0x14>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	440b      	add	r3, r1
 800054e:	6013      	str	r3, [r2, #0]
}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	2000006c 	.word	0x2000006c
 8000558:	20000000 	.word	0x20000000

0800055c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800055c:	4b01      	ldr	r3, [pc, #4]	@ (8000564 <HAL_GetTick+0x8>)
 800055e:	6818      	ldr	r0, [r3, #0]
}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	2000006c 	.word	0x2000006c

08000568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000568:	b538      	push	{r3, r4, r5, lr}
 800056a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff fff6 	bl	800055c <HAL_GetTick>
 8000570:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000572:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000576:	d002      	beq.n	800057e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000578:	4b04      	ldr	r3, [pc, #16]	@ (800058c <HAL_Delay+0x24>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800057e:	f7ff ffed 	bl	800055c <HAL_GetTick>
 8000582:	1b40      	subs	r0, r0, r5
 8000584:	42a0      	cmp	r0, r4
 8000586:	d3fa      	bcc.n	800057e <HAL_Delay+0x16>
  {
  }
}
 8000588:	bd38      	pop	{r3, r4, r5, pc}
 800058a:	bf00      	nop
 800058c:	20000000 	.word	0x20000000

08000590 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000590:	2800      	cmp	r0, #0
 8000592:	db08      	blt.n	80005a6 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000594:	0109      	lsls	r1, r1, #4
 8000596:	b2c9      	uxtb	r1, r1
 8000598:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800059c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80005a0:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80005a4:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a6:	f000 000f 	and.w	r0, r0, #15
 80005aa:	0109      	lsls	r1, r1, #4
 80005ac:	b2c9      	uxtb	r1, r1
 80005ae:	4b01      	ldr	r3, [pc, #4]	@ (80005b4 <__NVIC_SetPriority+0x24>)
 80005b0:	5419      	strb	r1, [r3, r0]
  }
}
 80005b2:	4770      	bx	lr
 80005b4:	e000ed14 	.word	0xe000ed14

080005b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005b8:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005ba:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005be:	f1c0 0c07 	rsb	ip, r0, #7
 80005c2:	f1bc 0f04 	cmp.w	ip, #4
 80005c6:	bf28      	it	cs
 80005c8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005cc:	1d03      	adds	r3, r0, #4
 80005ce:	2b06      	cmp	r3, #6
 80005d0:	d90f      	bls.n	80005f2 <NVIC_EncodePriority+0x3a>
 80005d2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d4:	f04f 3eff 	mov.w	lr, #4294967295
 80005d8:	fa0e f00c 	lsl.w	r0, lr, ip
 80005dc:	ea21 0100 	bic.w	r1, r1, r0
 80005e0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005e2:	fa0e fe03 	lsl.w	lr, lr, r3
 80005e6:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80005ea:	ea41 0002 	orr.w	r0, r1, r2
 80005ee:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f2:	2300      	movs	r3, #0
 80005f4:	e7ee      	b.n	80005d4 <NVIC_EncodePriority+0x1c>
	...

080005f8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f8:	4a07      	ldr	r2, [pc, #28]	@ (8000618 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005fa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000600:	041b      	lsls	r3, r3, #16
 8000602:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000604:	0200      	lsls	r0, r0, #8
 8000606:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800060a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800060c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000614:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000616:	4770      	bx	lr
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800061c:	b510      	push	{r4, lr}
 800061e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000620:	4b05      	ldr	r3, [pc, #20]	@ (8000638 <HAL_NVIC_SetPriority+0x1c>)
 8000622:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000624:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000628:	f7ff ffc6 	bl	80005b8 <NVIC_EncodePriority>
 800062c:	4601      	mov	r1, r0
 800062e:	4620      	mov	r0, r4
 8000630:	f7ff ffae 	bl	8000590 <__NVIC_SetPriority>
}
 8000634:	bd10      	pop	{r4, pc}
 8000636:	bf00      	nop
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800063c:	3801      	subs	r0, #1
 800063e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000642:	d20b      	bcs.n	800065c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000644:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000648:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064a:	4a05      	ldr	r2, [pc, #20]	@ (8000660 <HAL_SYSTICK_Config+0x24>)
 800064c:	21f0      	movs	r1, #240	@ 0xf0
 800064e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000652:	2000      	movs	r0, #0
 8000654:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000656:	2207      	movs	r2, #7
 8000658:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800065a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800065c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000664:	2300      	movs	r3, #0
 8000666:	2b0f      	cmp	r3, #15
 8000668:	f200 80e9 	bhi.w	800083e <HAL_GPIO_Init+0x1da>
{
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	e065      	b.n	800073e <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000672:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000674:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000678:	2403      	movs	r4, #3
 800067a:	fa04 f40e 	lsl.w	r4, r4, lr
 800067e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000682:	68cc      	ldr	r4, [r1, #12]
 8000684:	fa04 f40e 	lsl.w	r4, r4, lr
 8000688:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800068a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800068c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800068e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000692:	684a      	ldr	r2, [r1, #4]
 8000694:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000698:	409a      	lsls	r2, r3
 800069a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 800069c:	6042      	str	r2, [r0, #4]
 800069e:	e05c      	b.n	800075a <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80006a0:	08dc      	lsrs	r4, r3, #3
 80006a2:	3408      	adds	r4, #8
 80006a4:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006a8:	f003 0507 	and.w	r5, r3, #7
 80006ac:	00ad      	lsls	r5, r5, #2
 80006ae:	f04f 0e0f 	mov.w	lr, #15
 80006b2:	fa0e fe05 	lsl.w	lr, lr, r5
 80006b6:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006ba:	690a      	ldr	r2, [r1, #16]
 80006bc:	40aa      	lsls	r2, r5
 80006be:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80006c2:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80006c6:	e05c      	b.n	8000782 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006c8:	2207      	movs	r2, #7
 80006ca:	e000      	b.n	80006ce <HAL_GPIO_Init+0x6a>
 80006cc:	2200      	movs	r2, #0
 80006ce:	fa02 f20e 	lsl.w	r2, r2, lr
 80006d2:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80006d4:	3402      	adds	r4, #2
 80006d6:	4d5a      	ldr	r5, [pc, #360]	@ (8000840 <HAL_GPIO_Init+0x1dc>)
 80006d8:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006dc:	4a59      	ldr	r2, [pc, #356]	@ (8000844 <HAL_GPIO_Init+0x1e0>)
 80006de:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80006e0:	ea6f 020c 	mvn.w	r2, ip
 80006e4:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80006e8:	684e      	ldr	r6, [r1, #4]
 80006ea:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 80006ee:	d001      	beq.n	80006f4 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 80006f0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80006f4:	4c53      	ldr	r4, [pc, #332]	@ (8000844 <HAL_GPIO_Init+0x1e0>)
 80006f6:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80006f8:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80006fa:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80006fe:	684e      	ldr	r6, [r1, #4]
 8000700:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000704:	d001      	beq.n	800070a <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000706:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 800070a:	4c4e      	ldr	r4, [pc, #312]	@ (8000844 <HAL_GPIO_Init+0x1e0>)
 800070c:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 800070e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000710:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000714:	684e      	ldr	r6, [r1, #4]
 8000716:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 800071a:	d001      	beq.n	8000720 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 800071c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000720:	4c48      	ldr	r4, [pc, #288]	@ (8000844 <HAL_GPIO_Init+0x1e0>)
 8000722:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000724:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000726:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000728:	684d      	ldr	r5, [r1, #4]
 800072a:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 800072e:	d001      	beq.n	8000734 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000730:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000734:	4c43      	ldr	r4, [pc, #268]	@ (8000844 <HAL_GPIO_Init+0x1e0>)
 8000736:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000738:	3301      	adds	r3, #1
 800073a:	2b0f      	cmp	r3, #15
 800073c:	d87d      	bhi.n	800083a <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 800073e:	2201      	movs	r2, #1
 8000740:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000742:	680c      	ldr	r4, [r1, #0]
 8000744:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000748:	ea32 0404 	bics.w	r4, r2, r4
 800074c:	d1f4      	bne.n	8000738 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800074e:	684c      	ldr	r4, [r1, #4]
 8000750:	f004 0403 	and.w	r4, r4, #3
 8000754:	3c01      	subs	r4, #1
 8000756:	2c01      	cmp	r4, #1
 8000758:	d98b      	bls.n	8000672 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800075a:	684a      	ldr	r2, [r1, #4]
 800075c:	f002 0203 	and.w	r2, r2, #3
 8000760:	2a03      	cmp	r2, #3
 8000762:	d009      	beq.n	8000778 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000764:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000766:	005d      	lsls	r5, r3, #1
 8000768:	2203      	movs	r2, #3
 800076a:	40aa      	lsls	r2, r5
 800076c:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000770:	688a      	ldr	r2, [r1, #8]
 8000772:	40aa      	lsls	r2, r5
 8000774:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000776:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000778:	684a      	ldr	r2, [r1, #4]
 800077a:	f002 0203 	and.w	r2, r2, #3
 800077e:	2a02      	cmp	r2, #2
 8000780:	d08e      	beq.n	80006a0 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000782:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000784:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000788:	2203      	movs	r2, #3
 800078a:	fa02 f20e 	lsl.w	r2, r2, lr
 800078e:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000792:	684a      	ldr	r2, [r1, #4]
 8000794:	f002 0203 	and.w	r2, r2, #3
 8000798:	fa02 f20e 	lsl.w	r2, r2, lr
 800079c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800079e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80007a0:	684a      	ldr	r2, [r1, #4]
 80007a2:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80007a6:	d0c7      	beq.n	8000738 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a8:	2200      	movs	r2, #0
 80007aa:	9201      	str	r2, [sp, #4]
 80007ac:	4a26      	ldr	r2, [pc, #152]	@ (8000848 <HAL_GPIO_Init+0x1e4>)
 80007ae:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80007b0:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80007b4:	6454      	str	r4, [r2, #68]	@ 0x44
 80007b6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80007b8:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80007bc:	9201      	str	r2, [sp, #4]
 80007be:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80007c0:	089c      	lsrs	r4, r3, #2
 80007c2:	1ca5      	adds	r5, r4, #2
 80007c4:	4a1e      	ldr	r2, [pc, #120]	@ (8000840 <HAL_GPIO_Init+0x1dc>)
 80007c6:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007ca:	f003 0e03 	and.w	lr, r3, #3
 80007ce:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80007d2:	220f      	movs	r2, #15
 80007d4:	fa02 f20e 	lsl.w	r2, r2, lr
 80007d8:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007dc:	4a1b      	ldr	r2, [pc, #108]	@ (800084c <HAL_GPIO_Init+0x1e8>)
 80007de:	4290      	cmp	r0, r2
 80007e0:	f43f af74 	beq.w	80006cc <HAL_GPIO_Init+0x68>
 80007e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80007e8:	4290      	cmp	r0, r2
 80007ea:	d01a      	beq.n	8000822 <HAL_GPIO_Init+0x1be>
 80007ec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80007f0:	4290      	cmp	r0, r2
 80007f2:	d018      	beq.n	8000826 <HAL_GPIO_Init+0x1c2>
 80007f4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80007f8:	4290      	cmp	r0, r2
 80007fa:	d016      	beq.n	800082a <HAL_GPIO_Init+0x1c6>
 80007fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000800:	4290      	cmp	r0, r2
 8000802:	d014      	beq.n	800082e <HAL_GPIO_Init+0x1ca>
 8000804:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000808:	4290      	cmp	r0, r2
 800080a:	d012      	beq.n	8000832 <HAL_GPIO_Init+0x1ce>
 800080c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000810:	4290      	cmp	r0, r2
 8000812:	d010      	beq.n	8000836 <HAL_GPIO_Init+0x1d2>
 8000814:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000818:	4290      	cmp	r0, r2
 800081a:	f43f af55 	beq.w	80006c8 <HAL_GPIO_Init+0x64>
 800081e:	2208      	movs	r2, #8
 8000820:	e755      	b.n	80006ce <HAL_GPIO_Init+0x6a>
 8000822:	2201      	movs	r2, #1
 8000824:	e753      	b.n	80006ce <HAL_GPIO_Init+0x6a>
 8000826:	2202      	movs	r2, #2
 8000828:	e751      	b.n	80006ce <HAL_GPIO_Init+0x6a>
 800082a:	2203      	movs	r2, #3
 800082c:	e74f      	b.n	80006ce <HAL_GPIO_Init+0x6a>
 800082e:	2204      	movs	r2, #4
 8000830:	e74d      	b.n	80006ce <HAL_GPIO_Init+0x6a>
 8000832:	2205      	movs	r2, #5
 8000834:	e74b      	b.n	80006ce <HAL_GPIO_Init+0x6a>
 8000836:	2206      	movs	r2, #6
 8000838:	e749      	b.n	80006ce <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 800083a:	b002      	add	sp, #8
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	4770      	bx	lr
 8000840:	40013800 	.word	0x40013800
 8000844:	40013c00 	.word	0x40013c00
 8000848:	40023800 	.word	0x40023800
 800084c:	40020000 	.word	0x40020000

08000850 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000850:	b10a      	cbz	r2, 8000856 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000852:	6181      	str	r1, [r0, #24]
 8000854:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000856:	0409      	lsls	r1, r1, #16
 8000858:	6181      	str	r1, [r0, #24]
  }
}
 800085a:	4770      	bx	lr

0800085c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800085c:	6803      	ldr	r3, [r0, #0]
 800085e:	695a      	ldr	r2, [r3, #20]
 8000860:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8000864:	d101      	bne.n	800086a <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8000866:	2000      	movs	r0, #0
}
 8000868:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800086a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800086e:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000870:	2300      	movs	r3, #0
 8000872:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000874:	2220      	movs	r2, #32
 8000876:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800087a:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800087e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8000880:	f042 0204 	orr.w	r2, r2, #4
 8000884:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 8000886:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 800088a:	2001      	movs	r0, #1
 800088c:	4770      	bx	lr

0800088e <I2C_WaitOnFlagUntilTimeout>:
{
 800088e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000892:	4607      	mov	r7, r0
 8000894:	460d      	mov	r5, r1
 8000896:	4690      	mov	r8, r2
 8000898:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800089a:	e024      	b.n	80008e6 <I2C_WaitOnFlagUntilTimeout+0x58>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800089c:	f7ff fe5e 	bl	800055c <HAL_GetTick>
 80008a0:	9b06      	ldr	r3, [sp, #24]
 80008a2:	1ac0      	subs	r0, r0, r3
 80008a4:	42b0      	cmp	r0, r6
 80008a6:	d800      	bhi.n	80008aa <I2C_WaitOnFlagUntilTimeout+0x1c>
 80008a8:	b9ee      	cbnz	r6, 80008e6 <I2C_WaitOnFlagUntilTimeout+0x58>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	633b      	str	r3, [r7, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80008ae:	2220      	movs	r2, #32
 80008b0:	f887 203d 	strb.w	r2, [r7, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80008b4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80008b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80008ba:	f042 0220 	orr.w	r2, r2, #32
 80008be:	643a      	str	r2, [r7, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80008c0:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        return HAL_ERROR;
 80008c4:	2001      	movs	r0, #1
 80008c6:	e01e      	b.n	8000906 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	699c      	ldr	r4, [r3, #24]
 80008cc:	ea25 0c04 	bic.w	ip, r5, r4
 80008d0:	fa1f fc8c 	uxth.w	ip, ip
 80008d4:	fabc fc8c 	clz	ip, ip
 80008d8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80008dc:	45e0      	cmp	r8, ip
 80008de:	d111      	bne.n	8000904 <I2C_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 80008e0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80008e4:	d1da      	bne.n	800089c <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80008e6:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d1ec      	bne.n	80008c8 <I2C_WaitOnFlagUntilTimeout+0x3a>
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	ea25 0c03 	bic.w	ip, r5, r3
 80008f6:	fa1f fc8c 	uxth.w	ip, ip
 80008fa:	fabc fc8c 	clz	ip, ip
 80008fe:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8000902:	e7eb      	b.n	80008dc <I2C_WaitOnFlagUntilTimeout+0x4e>
  return HAL_OK;
 8000904:	2000      	movs	r0, #0
}
 8000906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800090a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800090a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800090e:	4605      	mov	r5, r0
 8000910:	460e      	mov	r6, r1
 8000912:	4617      	mov	r7, r2
 8000914:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000916:	e03d      	b.n	8000994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800091e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000920:	682b      	ldr	r3, [r5, #0]
 8000922:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8000926:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000928:	2300      	movs	r3, #0
 800092a:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800092c:	2220      	movs	r2, #32
 800092e:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000932:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000936:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8000938:	f042 0204 	orr.w	r2, r2, #4
 800093c:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 800093e:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8000942:	2001      	movs	r0, #1
 8000944:	e034      	b.n	80009b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000946:	f7ff fe09 	bl	800055c <HAL_GetTick>
 800094a:	eba0 0008 	sub.w	r0, r0, r8
 800094e:	42b8      	cmp	r0, r7
 8000950:	d800      	bhi.n	8000954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 8000952:	b9ff      	cbnz	r7, 8000994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000954:	2300      	movs	r3, #0
 8000956:	632b      	str	r3, [r5, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000958:	2220      	movs	r2, #32
 800095a:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800095e:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000962:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8000964:	f042 0220 	orr.w	r2, r2, #32
 8000968:	642a      	str	r2, [r5, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800096a:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
        return HAL_ERROR;
 800096e:	2001      	movs	r0, #1
 8000970:	e01e      	b.n	80009b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000972:	682b      	ldr	r3, [r5, #0]
 8000974:	699c      	ldr	r4, [r3, #24]
 8000976:	ea26 0404 	bic.w	r4, r6, r4
 800097a:	b2a4      	uxth	r4, r4
 800097c:	3c00      	subs	r4, #0
 800097e:	bf18      	it	ne
 8000980:	2401      	movne	r4, #1
 8000982:	b1a4      	cbz	r4, 80009ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000984:	682b      	ldr	r3, [r5, #0]
 8000986:	695a      	ldr	r2, [r3, #20]
 8000988:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800098c:	d1c4      	bne.n	8000918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 800098e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8000992:	d1d8      	bne.n	8000946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000994:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8000998:	2b01      	cmp	r3, #1
 800099a:	d1ea      	bne.n	8000972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 800099c:	682b      	ldr	r3, [r5, #0]
 800099e:	695c      	ldr	r4, [r3, #20]
 80009a0:	ea26 0404 	bic.w	r4, r6, r4
 80009a4:	b2a4      	uxth	r4, r4
 80009a6:	3c00      	subs	r4, #0
 80009a8:	bf18      	it	ne
 80009aa:	2401      	movne	r4, #1
 80009ac:	e7e9      	b.n	8000982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 80009ae:	2000      	movs	r0, #0
}
 80009b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080009b4 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80009b4:	b570      	push	{r4, r5, r6, lr}
 80009b6:	4604      	mov	r4, r0
 80009b8:	460d      	mov	r5, r1
 80009ba:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80009bc:	6823      	ldr	r3, [r4, #0]
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80009c4:	d11c      	bne.n	8000a00 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80009c6:	4620      	mov	r0, r4
 80009c8:	f7ff ff48 	bl	800085c <I2C_IsAcknowledgeFailed>
 80009cc:	b9d0      	cbnz	r0, 8000a04 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80009ce:	f1b5 3fff 	cmp.w	r5, #4294967295
 80009d2:	d0f3      	beq.n	80009bc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009d4:	f7ff fdc2 	bl	800055c <HAL_GetTick>
 80009d8:	1b80      	subs	r0, r0, r6
 80009da:	42a8      	cmp	r0, r5
 80009dc:	d801      	bhi.n	80009e2 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80009de:	2d00      	cmp	r5, #0
 80009e0:	d1ec      	bne.n	80009bc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80009e6:	2220      	movs	r2, #32
 80009e8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80009ec:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80009f0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80009f2:	f042 0220 	orr.w	r2, r2, #32
 80009f6:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80009f8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_ERROR;
 80009fc:	2001      	movs	r0, #1
 80009fe:	e000      	b.n	8000a02 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8000a00:	2000      	movs	r0, #0
}
 8000a02:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000a04:	2001      	movs	r0, #1
 8000a06:	e7fc      	b.n	8000a02 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08000a08 <I2C_RequestMemoryWrite>:
{
 8000a08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a0c:	b085      	sub	sp, #20
 8000a0e:	4604      	mov	r4, r0
 8000a10:	460d      	mov	r5, r1
 8000a12:	4691      	mov	r9, r2
 8000a14:	461f      	mov	r7, r3
 8000a16:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8000a1a:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000a1c:	6803      	ldr	r3, [r0, #0]
 8000a1e:	6819      	ldr	r1, [r3, #0]
 8000a20:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8000a24:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000a26:	9600      	str	r6, [sp, #0]
 8000a28:	4643      	mov	r3, r8
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000a30:	f7ff ff2d 	bl	800088e <I2C_WaitOnFlagUntilTimeout>
 8000a34:	b960      	cbnz	r0, 8000a50 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000a36:	6823      	ldr	r3, [r4, #0]
 8000a38:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8000a3c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000a3e:	4633      	mov	r3, r6
 8000a40:	4642      	mov	r2, r8
 8000a42:	4926      	ldr	r1, [pc, #152]	@ (8000adc <I2C_RequestMemoryWrite+0xd4>)
 8000a44:	4620      	mov	r0, r4
 8000a46:	f7ff ff60 	bl	800090a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000a4a:	b168      	cbz	r0, 8000a68 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	e008      	b.n	8000a62 <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000a50:	6823      	ldr	r3, [r4, #0]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000a58:	d002      	beq.n	8000a60 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000a5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a5e:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8000a60:	2003      	movs	r0, #3
}
 8000a62:	b005      	add	sp, #20
 8000a64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000a68:	2300      	movs	r3, #0
 8000a6a:	9303      	str	r3, [sp, #12]
 8000a6c:	6823      	ldr	r3, [r4, #0]
 8000a6e:	695a      	ldr	r2, [r3, #20]
 8000a70:	9203      	str	r2, [sp, #12]
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	9303      	str	r3, [sp, #12]
 8000a76:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000a78:	4632      	mov	r2, r6
 8000a7a:	4641      	mov	r1, r8
 8000a7c:	4620      	mov	r0, r4
 8000a7e:	f7ff ff99 	bl	80009b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000a82:	b930      	cbnz	r0, 8000a92 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000a84:	2f01      	cmp	r7, #1
 8000a86:	d10f      	bne.n	8000aa8 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000a88:	6823      	ldr	r3, [r4, #0]
 8000a8a:	fa5f f689 	uxtb.w	r6, r9
 8000a8e:	611e      	str	r6, [r3, #16]
 8000a90:	e7e7      	b.n	8000a62 <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a92:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000a94:	2b04      	cmp	r3, #4
 8000a96:	d001      	beq.n	8000a9c <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8000a98:	2001      	movs	r0, #1
 8000a9a:	e7e2      	b.n	8000a62 <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000a9c:	6822      	ldr	r2, [r4, #0]
 8000a9e:	6813      	ldr	r3, [r2, #0]
 8000aa0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000aa4:	6013      	str	r3, [r2, #0]
 8000aa6:	e7f7      	b.n	8000a98 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000aa8:	6823      	ldr	r3, [r4, #0]
 8000aaa:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8000aae:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ab0:	4632      	mov	r2, r6
 8000ab2:	4641      	mov	r1, r8
 8000ab4:	4620      	mov	r0, r4
 8000ab6:	f7ff ff7d 	bl	80009b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000aba:	b920      	cbnz	r0, 8000ac6 <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000abc:	6823      	ldr	r3, [r4, #0]
 8000abe:	fa5f f689 	uxtb.w	r6, r9
 8000ac2:	611e      	str	r6, [r3, #16]
 8000ac4:	e7cd      	b.n	8000a62 <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ac6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000ac8:	2b04      	cmp	r3, #4
 8000aca:	d001      	beq.n	8000ad0 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8000acc:	2001      	movs	r0, #1
 8000ace:	e7c8      	b.n	8000a62 <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ad0:	6822      	ldr	r2, [r4, #0]
 8000ad2:	6813      	ldr	r3, [r2, #0]
 8000ad4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ad8:	6013      	str	r3, [r2, #0]
 8000ada:	e7f7      	b.n	8000acc <I2C_RequestMemoryWrite+0xc4>
 8000adc:	00010002 	.word	0x00010002

08000ae0 <I2C_RequestMemoryRead>:
{
 8000ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae4:	b084      	sub	sp, #16
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	460d      	mov	r5, r1
 8000aea:	4616      	mov	r6, r2
 8000aec:	4699      	mov	r9, r3
 8000aee:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8000af0:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000af4:	6802      	ldr	r2, [r0, #0]
 8000af6:	6813      	ldr	r3, [r2, #0]
 8000af8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000afc:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000afe:	6803      	ldr	r3, [r0, #0]
 8000b00:	6819      	ldr	r1, [r3, #0]
 8000b02:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8000b06:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b08:	f8cd 8000 	str.w	r8, [sp]
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000b14:	f7ff febb 	bl	800088e <I2C_WaitOnFlagUntilTimeout>
 8000b18:	b970      	cbnz	r0, 8000b38 <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000b1a:	fa5f fa85 	uxtb.w	sl, r5
 8000b1e:	6823      	ldr	r3, [r4, #0]
 8000b20:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8000b24:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000b26:	4643      	mov	r3, r8
 8000b28:	463a      	mov	r2, r7
 8000b2a:	4941      	ldr	r1, [pc, #260]	@ (8000c30 <I2C_RequestMemoryRead+0x150>)
 8000b2c:	4620      	mov	r0, r4
 8000b2e:	f7ff feec 	bl	800090a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000b32:	b168      	cbz	r0, 8000b50 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8000b34:	2001      	movs	r0, #1
 8000b36:	e008      	b.n	8000b4a <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000b38:	6823      	ldr	r3, [r4, #0]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000b40:	d002      	beq.n	8000b48 <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000b42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b46:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8000b48:	2003      	movs	r0, #3
}
 8000b4a:	b004      	add	sp, #16
 8000b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b50:	2300      	movs	r3, #0
 8000b52:	9303      	str	r3, [sp, #12]
 8000b54:	6823      	ldr	r3, [r4, #0]
 8000b56:	695a      	ldr	r2, [r3, #20]
 8000b58:	9203      	str	r2, [sp, #12]
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	9303      	str	r3, [sp, #12]
 8000b5e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b60:	4642      	mov	r2, r8
 8000b62:	4639      	mov	r1, r7
 8000b64:	4620      	mov	r0, r4
 8000b66:	f7ff ff25 	bl	80009b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000b6a:	b980      	cbnz	r0, 8000b8e <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000b6c:	f1b9 0f01 	cmp.w	r9, #1
 8000b70:	d118      	bne.n	8000ba4 <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000b72:	6823      	ldr	r3, [r4, #0]
 8000b74:	b2f6      	uxtb	r6, r6
 8000b76:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b78:	4642      	mov	r2, r8
 8000b7a:	4639      	mov	r1, r7
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	f7ff ff19 	bl	80009b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000b82:	b368      	cbz	r0, 8000be0 <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	d024      	beq.n	8000bd4 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	e7dd      	b.n	8000b4a <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b8e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	d001      	beq.n	8000b98 <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 8000b94:	2001      	movs	r0, #1
 8000b96:	e7d8      	b.n	8000b4a <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b98:	6822      	ldr	r2, [r4, #0]
 8000b9a:	6813      	ldr	r3, [r2, #0]
 8000b9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	e7f7      	b.n	8000b94 <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000ba4:	6823      	ldr	r3, [r4, #0]
 8000ba6:	0a32      	lsrs	r2, r6, #8
 8000ba8:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000baa:	4642      	mov	r2, r8
 8000bac:	4639      	mov	r1, r7
 8000bae:	4620      	mov	r0, r4
 8000bb0:	f7ff ff00 	bl	80009b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000bb4:	b918      	cbnz	r0, 8000bbe <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000bb6:	6823      	ldr	r3, [r4, #0]
 8000bb8:	b2f6      	uxtb	r6, r6
 8000bba:	611e      	str	r6, [r3, #16]
 8000bbc:	e7dc      	b.n	8000b78 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000bbe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d001      	beq.n	8000bc8 <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	e7c0      	b.n	8000b4a <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000bc8:	6822      	ldr	r2, [r4, #0]
 8000bca:	6813      	ldr	r3, [r2, #0]
 8000bcc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bd0:	6013      	str	r3, [r2, #0]
 8000bd2:	e7f7      	b.n	8000bc4 <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000bd4:	6822      	ldr	r2, [r4, #0]
 8000bd6:	6813      	ldr	r3, [r2, #0]
 8000bd8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bdc:	6013      	str	r3, [r2, #0]
 8000bde:	e7d4      	b.n	8000b8a <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000be0:	6822      	ldr	r2, [r4, #0]
 8000be2:	6813      	ldr	r3, [r2, #0]
 8000be4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000be8:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000bea:	f8cd 8000 	str.w	r8, [sp]
 8000bee:	463b      	mov	r3, r7
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000bf6:	4620      	mov	r0, r4
 8000bf8:	f7ff fe49 	bl	800088e <I2C_WaitOnFlagUntilTimeout>
 8000bfc:	b968      	cbnz	r0, 8000c1a <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000bfe:	6822      	ldr	r2, [r4, #0]
 8000c00:	f04a 0301 	orr.w	r3, sl, #1
 8000c04:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000c06:	4643      	mov	r3, r8
 8000c08:	463a      	mov	r2, r7
 8000c0a:	4909      	ldr	r1, [pc, #36]	@ (8000c30 <I2C_RequestMemoryRead+0x150>)
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	f7ff fe7c 	bl	800090a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000c12:	2800      	cmp	r0, #0
 8000c14:	d099      	beq.n	8000b4a <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 8000c16:	2001      	movs	r0, #1
 8000c18:	e797      	b.n	8000b4a <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000c1a:	6823      	ldr	r3, [r4, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000c22:	d002      	beq.n	8000c2a <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000c24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c28:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8000c2a:	2003      	movs	r0, #3
 8000c2c:	e78d      	b.n	8000b4a <I2C_RequestMemoryRead+0x6a>
 8000c2e:	bf00      	nop
 8000c30:	00010002 	.word	0x00010002

08000c34 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8000c34:	b570      	push	{r4, r5, r6, lr}
 8000c36:	4604      	mov	r4, r0
 8000c38:	460d      	mov	r5, r1
 8000c3a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000c3c:	6823      	ldr	r3, [r4, #0]
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	f013 0f04 	tst.w	r3, #4
 8000c44:	d11c      	bne.n	8000c80 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000c46:	4620      	mov	r0, r4
 8000c48:	f7ff fe08 	bl	800085c <I2C_IsAcknowledgeFailed>
 8000c4c:	b9d0      	cbnz	r0, 8000c84 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000c4e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000c52:	d0f3      	beq.n	8000c3c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c54:	f7ff fc82 	bl	800055c <HAL_GetTick>
 8000c58:	1b80      	subs	r0, r0, r6
 8000c5a:	42a8      	cmp	r0, r5
 8000c5c:	d801      	bhi.n	8000c62 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d1ec      	bne.n	8000c3c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000c66:	2220      	movs	r2, #32
 8000c68:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000c6c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000c70:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8000c72:	f042 0220 	orr.w	r2, r2, #32
 8000c76:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8000c78:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_ERROR;
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	e000      	b.n	8000c82 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8000c80:	2000      	movs	r0, #0
}
 8000c82:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000c84:	2001      	movs	r0, #1
 8000c86:	e7fc      	b.n	8000c82 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08000c88 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000c88:	b570      	push	{r4, r5, r6, lr}
 8000c8a:	4605      	mov	r5, r0
 8000c8c:	460c      	mov	r4, r1
 8000c8e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000c90:	682b      	ldr	r3, [r5, #0]
 8000c92:	6959      	ldr	r1, [r3, #20]
 8000c94:	f011 0f40 	tst.w	r1, #64	@ 0x40
 8000c98:	d129      	bne.n	8000cee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000c9a:	6959      	ldr	r1, [r3, #20]
 8000c9c:	f011 0f10 	tst.w	r1, #16
 8000ca0:	d115      	bne.n	8000cce <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ca2:	f7ff fc5b 	bl	800055c <HAL_GetTick>
 8000ca6:	1b80      	subs	r0, r0, r6
 8000ca8:	42a0      	cmp	r0, r4
 8000caa:	d801      	bhi.n	8000cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8000cac:	2c00      	cmp	r4, #0
 8000cae:	d1ef      	bne.n	8000c90 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000cb4:	2220      	movs	r2, #32
 8000cb6:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000cba:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000cbe:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8000cc0:	f042 0220 	orr.w	r2, r2, #32
 8000cc4:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8000cc6:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8000cca:	2001      	movs	r0, #1
}
 8000ccc:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000cce:	f06f 0210 	mvn.w	r2, #16
 8000cd2:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000cd8:	2220      	movs	r2, #32
 8000cda:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000cde:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8000ce2:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8000ce4:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8000ce6:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8000cea:	2001      	movs	r0, #1
 8000cec:	e7ee      	b.n	8000ccc <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8000cee:	2000      	movs	r0, #0
 8000cf0:	e7ec      	b.n	8000ccc <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08000cf4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8000cf4:	2800      	cmp	r0, #0
 8000cf6:	f000 80cc 	beq.w	8000e92 <HAL_I2C_Init+0x19e>
{
 8000cfa:	b570      	push	{r4, r5, r6, lr}
 8000cfc:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cfe:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d077      	beq.n	8000df6 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d06:	2324      	movs	r3, #36	@ 0x24
 8000d08:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000d0c:	6822      	ldr	r2, [r4, #0]
 8000d0e:	6813      	ldr	r3, [r2, #0]
 8000d10:	f023 0301 	bic.w	r3, r3, #1
 8000d14:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000d16:	6822      	ldr	r2, [r4, #0]
 8000d18:	6813      	ldr	r3, [r2, #0]
 8000d1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d1e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000d20:	6822      	ldr	r2, [r4, #0]
 8000d22:	6813      	ldr	r3, [r2, #0]
 8000d24:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000d28:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d2a:	f000 fdeb 	bl	8001904 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d2e:	6862      	ldr	r2, [r4, #4]
 8000d30:	4b5a      	ldr	r3, [pc, #360]	@ (8000e9c <HAL_I2C_Init+0x1a8>)
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d864      	bhi.n	8000e00 <HAL_I2C_Init+0x10c>
 8000d36:	4b5a      	ldr	r3, [pc, #360]	@ (8000ea0 <HAL_I2C_Init+0x1ac>)
 8000d38:	4298      	cmp	r0, r3
 8000d3a:	bf8c      	ite	hi
 8000d3c:	2300      	movhi	r3, #0
 8000d3e:	2301      	movls	r3, #1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f040 80a8 	bne.w	8000e96 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8000d46:	4957      	ldr	r1, [pc, #348]	@ (8000ea4 <HAL_I2C_Init+0x1b0>)
 8000d48:	fba1 3100 	umull	r3, r1, r1, r0
 8000d4c:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d4e:	6825      	ldr	r5, [r4, #0]
 8000d50:	686a      	ldr	r2, [r5, #4]
 8000d52:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8000d56:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8000d5a:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d5c:	6821      	ldr	r1, [r4, #0]
 8000d5e:	6a0a      	ldr	r2, [r1, #32]
 8000d60:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8000d64:	6866      	ldr	r6, [r4, #4]
 8000d66:	4d4d      	ldr	r5, [pc, #308]	@ (8000e9c <HAL_I2C_Init+0x1a8>)
 8000d68:	42ae      	cmp	r6, r5
 8000d6a:	d84f      	bhi.n	8000e0c <HAL_I2C_Init+0x118>
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d72:	6821      	ldr	r1, [r4, #0]
 8000d74:	69ca      	ldr	r2, [r1, #28]
 8000d76:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8000d7a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000d7e:	6865      	ldr	r5, [r4, #4]
 8000d80:	4b46      	ldr	r3, [pc, #280]	@ (8000e9c <HAL_I2C_Init+0x1a8>)
 8000d82:	429d      	cmp	r5, r3
 8000d84:	d84c      	bhi.n	8000e20 <HAL_I2C_Init+0x12c>
 8000d86:	1e43      	subs	r3, r0, #1
 8000d88:	006d      	lsls	r5, r5, #1
 8000d8a:	fbb3 f3f5 	udiv	r3, r3, r5
 8000d8e:	3301      	adds	r3, #1
 8000d90:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8000d94:	4203      	tst	r3, r0
 8000d96:	d078      	beq.n	8000e8a <HAL_I2C_Init+0x196>
 8000d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d9c:	431a      	orrs	r2, r3
 8000d9e:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000da0:	6821      	ldr	r1, [r4, #0]
 8000da2:	680b      	ldr	r3, [r1, #0]
 8000da4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000da8:	69e2      	ldr	r2, [r4, #28]
 8000daa:	6a20      	ldr	r0, [r4, #32]
 8000dac:	4302      	orrs	r2, r0
 8000dae:	4313      	orrs	r3, r2
 8000db0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000db2:	6821      	ldr	r1, [r4, #0]
 8000db4:	688b      	ldr	r3, [r1, #8]
 8000db6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000dba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000dbe:	6922      	ldr	r2, [r4, #16]
 8000dc0:	68e0      	ldr	r0, [r4, #12]
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000dc8:	6821      	ldr	r1, [r4, #0]
 8000dca:	68cb      	ldr	r3, [r1, #12]
 8000dcc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000dd0:	6962      	ldr	r2, [r4, #20]
 8000dd2:	69a0      	ldr	r0, [r4, #24]
 8000dd4:	4302      	orrs	r2, r0
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000dda:	6822      	ldr	r2, [r4, #0]
 8000ddc:	6813      	ldr	r3, [r2, #0]
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000de4:	2000      	movs	r0, #0
 8000de6:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000de8:	2320      	movs	r3, #32
 8000dea:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000dee:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000df0:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8000df4:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000df6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8000dfa:	f001 f9b5 	bl	8002168 <HAL_I2C_MspInit>
 8000dfe:	e782      	b.n	8000d06 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e00:	4b29      	ldr	r3, [pc, #164]	@ (8000ea8 <HAL_I2C_Init+0x1b4>)
 8000e02:	4298      	cmp	r0, r3
 8000e04:	bf8c      	ite	hi
 8000e06:	2300      	movhi	r3, #0
 8000e08:	2301      	movls	r3, #1
 8000e0a:	e799      	b.n	8000d40 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e0c:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8000e10:	fb05 f303 	mul.w	r3, r5, r3
 8000e14:	4d25      	ldr	r5, [pc, #148]	@ (8000eac <HAL_I2C_Init+0x1b8>)
 8000e16:	fba5 5303 	umull	r5, r3, r5, r3
 8000e1a:	099b      	lsrs	r3, r3, #6
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	e7a6      	b.n	8000d6e <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e20:	68a6      	ldr	r6, [r4, #8]
 8000e22:	b9be      	cbnz	r6, 8000e54 <HAL_I2C_Init+0x160>
 8000e24:	1e43      	subs	r3, r0, #1
 8000e26:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8000e2a:	fbb3 f3fc 	udiv	r3, r3, ip
 8000e2e:	3301      	adds	r3, #1
 8000e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e34:	fab3 f383 	clz	r3, r3
 8000e38:	095b      	lsrs	r3, r3, #5
 8000e3a:	bb43      	cbnz	r3, 8000e8e <HAL_I2C_Init+0x19a>
 8000e3c:	b9c6      	cbnz	r6, 8000e70 <HAL_I2C_Init+0x17c>
 8000e3e:	1e43      	subs	r3, r0, #1
 8000e40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000e44:	fbb3 f3f5 	udiv	r3, r3, r5
 8000e48:	3301      	adds	r3, #1
 8000e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e52:	e7a3      	b.n	8000d9c <HAL_I2C_Init+0xa8>
 8000e54:	1e43      	subs	r3, r0, #1
 8000e56:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8000e5a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8000e5e:	fbb3 f3fc 	udiv	r3, r3, ip
 8000e62:	3301      	adds	r3, #1
 8000e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e68:	fab3 f383 	clz	r3, r3
 8000e6c:	095b      	lsrs	r3, r3, #5
 8000e6e:	e7e4      	b.n	8000e3a <HAL_I2C_Init+0x146>
 8000e70:	1e43      	subs	r3, r0, #1
 8000e72:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8000e76:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8000e7a:	fbb3 f3f5 	udiv	r3, r3, r5
 8000e7e:	3301      	adds	r3, #1
 8000e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e88:	e788      	b.n	8000d9c <HAL_I2C_Init+0xa8>
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	e786      	b.n	8000d9c <HAL_I2C_Init+0xa8>
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e784      	b.n	8000d9c <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8000e92:	2001      	movs	r0, #1
}
 8000e94:	4770      	bx	lr
    return HAL_ERROR;
 8000e96:	2001      	movs	r0, #1
 8000e98:	e7ac      	b.n	8000df4 <HAL_I2C_Init+0x100>
 8000e9a:	bf00      	nop
 8000e9c:	000186a0 	.word	0x000186a0
 8000ea0:	001e847f 	.word	0x001e847f
 8000ea4:	431bde83 	.word	0x431bde83
 8000ea8:	003d08ff 	.word	0x003d08ff
 8000eac:	10624dd3 	.word	0x10624dd3

08000eb0 <HAL_I2C_Mem_Write>:
{
 8000eb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	460f      	mov	r7, r1
 8000eba:	4690      	mov	r8, r2
 8000ebc:	4699      	mov	r9, r3
 8000ebe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8000ec0:	f7ff fb4c 	bl	800055c <HAL_GetTick>
 8000ec4:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ec6:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8000eca:	b2c0      	uxtb	r0, r0
 8000ecc:	2820      	cmp	r0, #32
 8000ece:	d003      	beq.n	8000ed8 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8000ed0:	2002      	movs	r0, #2
}
 8000ed2:	b003      	add	sp, #12
 8000ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ed8:	9500      	str	r5, [sp, #0]
 8000eda:	2319      	movs	r3, #25
 8000edc:	2201      	movs	r2, #1
 8000ede:	494b      	ldr	r1, [pc, #300]	@ (800100c <HAL_I2C_Mem_Write+0x15c>)
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	f7ff fcd4 	bl	800088e <I2C_WaitOnFlagUntilTimeout>
 8000ee6:	2800      	cmp	r0, #0
 8000ee8:	f040 8089 	bne.w	8000ffe <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8000eec:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	f000 8086 	beq.w	8001002 <HAL_I2C_Mem_Write+0x152>
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000efc:	6823      	ldr	r3, [r4, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	f012 0f01 	tst.w	r2, #1
 8000f04:	d103      	bne.n	8000f0e <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	f042 0201 	orr.w	r2, r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f0e:	6822      	ldr	r2, [r4, #0]
 8000f10:	6813      	ldr	r3, [r2, #0]
 8000f12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000f16:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000f18:	2321      	movs	r3, #33	@ 0x21
 8000f1a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f1e:	2340      	movs	r3, #64	@ 0x40
 8000f20:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8000f28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8000f2a:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8000f2c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8000f30:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000f32:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8000f34:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f36:	4b36      	ldr	r3, [pc, #216]	@ (8001010 <HAL_I2C_Mem_Write+0x160>)
 8000f38:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000f3a:	9501      	str	r5, [sp, #4]
 8000f3c:	9600      	str	r6, [sp, #0]
 8000f3e:	464b      	mov	r3, r9
 8000f40:	4642      	mov	r2, r8
 8000f42:	4639      	mov	r1, r7
 8000f44:	4620      	mov	r0, r4
 8000f46:	f7ff fd5f 	bl	8000a08 <I2C_RequestMemoryWrite>
 8000f4a:	2800      	cmp	r0, #0
 8000f4c:	d15b      	bne.n	8001006 <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 8000f4e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d035      	beq.n	8000fc0 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f54:	462a      	mov	r2, r5
 8000f56:	4631      	mov	r1, r6
 8000f58:	4620      	mov	r0, r4
 8000f5a:	f7ff fd2b 	bl	80009b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000f5e:	bb20      	cbnz	r0, 8000faa <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f60:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8000f62:	6823      	ldr	r3, [r4, #0]
 8000f64:	7812      	ldrb	r2, [r2, #0]
 8000f66:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8000f68:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8000f6a:	1c53      	adds	r3, r2, #1
 8000f6c:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8000f6e:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8000f70:	3901      	subs	r1, #1
 8000f72:	b289      	uxth	r1, r1
 8000f74:	8521      	strh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8000f76:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000f80:	6823      	ldr	r3, [r4, #0]
 8000f82:	6958      	ldr	r0, [r3, #20]
 8000f84:	f010 0f04 	tst.w	r0, #4
 8000f88:	d0e1      	beq.n	8000f4e <HAL_I2C_Mem_Write+0x9e>
 8000f8a:	2900      	cmp	r1, #0
 8000f8c:	d0df      	beq.n	8000f4e <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f8e:	7852      	ldrb	r2, [r2, #1]
 8000f90:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8000f92:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000f94:	3301      	adds	r3, #1
 8000f96:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8000f98:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8000f9e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8000fa8:	e7d1      	b.n	8000f4e <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000faa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000fac:	2b04      	cmp	r3, #4
 8000fae:	d001      	beq.n	8000fb4 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	e78e      	b.n	8000ed2 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fb4:	6822      	ldr	r2, [r4, #0]
 8000fb6:	6813      	ldr	r3, [r2, #0]
 8000fb8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e7f7      	b.n	8000fb0 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fc0:	462a      	mov	r2, r5
 8000fc2:	4631      	mov	r1, r6
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	f7ff fe35 	bl	8000c34 <I2C_WaitOnBTFFlagUntilTimeout>
 8000fca:	b150      	cbz	r0, 8000fe2 <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	d001      	beq.n	8000fd6 <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	e77d      	b.n	8000ed2 <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fd6:	6822      	ldr	r2, [r4, #0]
 8000fd8:	6813      	ldr	r3, [r2, #0]
 8000fda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	e7f7      	b.n	8000fd2 <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fe2:	6822      	ldr	r2, [r4, #0]
 8000fe4:	6813      	ldr	r3, [r2, #0]
 8000fe6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fea:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000fec:	2320      	movs	r3, #32
 8000fee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8000ff8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8000ffc:	e769      	b.n	8000ed2 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8000ffe:	2002      	movs	r0, #2
 8001000:	e767      	b.n	8000ed2 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8001002:	2002      	movs	r0, #2
 8001004:	e765      	b.n	8000ed2 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8001006:	2001      	movs	r0, #1
 8001008:	e763      	b.n	8000ed2 <HAL_I2C_Mem_Write+0x22>
 800100a:	bf00      	nop
 800100c:	00100002 	.word	0x00100002
 8001010:	ffff0000 	.word	0xffff0000

08001014 <HAL_I2C_Mem_Read>:
{
 8001014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001018:	b087      	sub	sp, #28
 800101a:	4604      	mov	r4, r0
 800101c:	460f      	mov	r7, r1
 800101e:	4690      	mov	r8, r2
 8001020:	4699      	mov	r9, r3
 8001022:	9e10      	ldr	r6, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff fa9a 	bl	800055c <HAL_GetTick>
 8001028:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800102a:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 800102e:	b2c0      	uxtb	r0, r0
 8001030:	2820      	cmp	r0, #32
 8001032:	d004      	beq.n	800103e <HAL_I2C_Mem_Read+0x2a>
    return HAL_BUSY;
 8001034:	2702      	movs	r7, #2
}
 8001036:	4638      	mov	r0, r7
 8001038:	b007      	add	sp, #28
 800103a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800103e:	9500      	str	r5, [sp, #0]
 8001040:	2319      	movs	r3, #25
 8001042:	2201      	movs	r2, #1
 8001044:	4988      	ldr	r1, [pc, #544]	@ (8001268 <HAL_I2C_Mem_Read+0x254>)
 8001046:	4620      	mov	r0, r4
 8001048:	f7ff fc21 	bl	800088e <I2C_WaitOnFlagUntilTimeout>
 800104c:	2800      	cmp	r0, #0
 800104e:	f040 8143 	bne.w	80012d8 <HAL_I2C_Mem_Read+0x2c4>
    __HAL_LOCK(hi2c);
 8001052:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001056:	2b01      	cmp	r3, #1
 8001058:	f000 8140 	beq.w	80012dc <HAL_I2C_Mem_Read+0x2c8>
 800105c:	2301      	movs	r3, #1
 800105e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001062:	6823      	ldr	r3, [r4, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	f012 0f01 	tst.w	r2, #1
 800106a:	d103      	bne.n	8001074 <HAL_I2C_Mem_Read+0x60>
      __HAL_I2C_ENABLE(hi2c);
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	f042 0201 	orr.w	r2, r2, #1
 8001072:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001074:	6822      	ldr	r2, [r4, #0]
 8001076:	6813      	ldr	r3, [r2, #0]
 8001078:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800107c:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800107e:	2322      	movs	r3, #34	@ 0x22
 8001080:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001084:	2340      	movs	r3, #64	@ 0x40
 8001086:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800108a:	2300      	movs	r3, #0
 800108c:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 800108e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8001090:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001092:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8001096:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001098:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800109a:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800109c:	4b73      	ldr	r3, [pc, #460]	@ (800126c <HAL_I2C_Mem_Read+0x258>)
 800109e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80010a0:	9501      	str	r5, [sp, #4]
 80010a2:	9600      	str	r6, [sp, #0]
 80010a4:	464b      	mov	r3, r9
 80010a6:	4642      	mov	r2, r8
 80010a8:	4639      	mov	r1, r7
 80010aa:	4620      	mov	r0, r4
 80010ac:	f7ff fd18 	bl	8000ae0 <I2C_RequestMemoryRead>
 80010b0:	4607      	mov	r7, r0
 80010b2:	2800      	cmp	r0, #0
 80010b4:	f040 8114 	bne.w	80012e0 <HAL_I2C_Mem_Read+0x2cc>
    if (hi2c->XferSize == 0U)
 80010b8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80010ba:	b95b      	cbnz	r3, 80010d4 <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010bc:	9302      	str	r3, [sp, #8]
 80010be:	6823      	ldr	r3, [r4, #0]
 80010c0:	695a      	ldr	r2, [r3, #20]
 80010c2:	9202      	str	r2, [sp, #8]
 80010c4:	699a      	ldr	r2, [r3, #24]
 80010c6:	9202      	str	r2, [sp, #8]
 80010c8:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	e075      	b.n	80011c0 <HAL_I2C_Mem_Read+0x1ac>
    else if (hi2c->XferSize == 1U)
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d00a      	beq.n	80010ee <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d01a      	beq.n	8001112 <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010dc:	2300      	movs	r3, #0
 80010de:	9305      	str	r3, [sp, #20]
 80010e0:	6823      	ldr	r3, [r4, #0]
 80010e2:	695a      	ldr	r2, [r3, #20]
 80010e4:	9205      	str	r2, [sp, #20]
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	9305      	str	r3, [sp, #20]
 80010ea:	9b05      	ldr	r3, [sp, #20]
 80010ec:	e068      	b.n	80011c0 <HAL_I2C_Mem_Read+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010ee:	6822      	ldr	r2, [r4, #0]
 80010f0:	6813      	ldr	r3, [r2, #0]
 80010f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80010f6:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010f8:	2300      	movs	r3, #0
 80010fa:	9303      	str	r3, [sp, #12]
 80010fc:	6823      	ldr	r3, [r4, #0]
 80010fe:	695a      	ldr	r2, [r3, #20]
 8001100:	9203      	str	r2, [sp, #12]
 8001102:	699a      	ldr	r2, [r3, #24]
 8001104:	9203      	str	r2, [sp, #12]
 8001106:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	e056      	b.n	80011c0 <HAL_I2C_Mem_Read+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001112:	6822      	ldr	r2, [r4, #0]
 8001114:	6813      	ldr	r3, [r2, #0]
 8001116:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800111a:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800111c:	6822      	ldr	r2, [r4, #0]
 800111e:	6813      	ldr	r3, [r2, #0]
 8001120:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001124:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001126:	2300      	movs	r3, #0
 8001128:	9304      	str	r3, [sp, #16]
 800112a:	6823      	ldr	r3, [r4, #0]
 800112c:	695a      	ldr	r2, [r3, #20]
 800112e:	9204      	str	r2, [sp, #16]
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	9304      	str	r3, [sp, #16]
 8001134:	9b04      	ldr	r3, [sp, #16]
 8001136:	e043      	b.n	80011c0 <HAL_I2C_Mem_Read+0x1ac>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001138:	462a      	mov	r2, r5
 800113a:	4631      	mov	r1, r6
 800113c:	4620      	mov	r0, r4
 800113e:	f7ff fda3 	bl	8000c88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001142:	2800      	cmp	r0, #0
 8001144:	f040 80ce 	bne.w	80012e4 <HAL_I2C_Mem_Read+0x2d0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001148:	6823      	ldr	r3, [r4, #0]
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800114e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001150:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001152:	3301      	adds	r3, #1
 8001154:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001156:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001158:	3b01      	subs	r3, #1
 800115a:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800115c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800115e:	b29b      	uxth	r3, r3
 8001160:	3b01      	subs	r3, #1
 8001162:	b29b      	uxth	r3, r3
 8001164:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8001166:	e02b      	b.n	80011c0 <HAL_I2C_Mem_Read+0x1ac>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001168:	9500      	str	r5, [sp, #0]
 800116a:	4633      	mov	r3, r6
 800116c:	2200      	movs	r2, #0
 800116e:	4940      	ldr	r1, [pc, #256]	@ (8001270 <HAL_I2C_Mem_Read+0x25c>)
 8001170:	4620      	mov	r0, r4
 8001172:	f7ff fb8c 	bl	800088e <I2C_WaitOnFlagUntilTimeout>
 8001176:	2800      	cmp	r0, #0
 8001178:	f040 80b6 	bne.w	80012e8 <HAL_I2C_Mem_Read+0x2d4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800117c:	6822      	ldr	r2, [r4, #0]
 800117e:	6813      	ldr	r3, [r2, #0]
 8001180:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001184:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001186:	6823      	ldr	r3, [r4, #0]
 8001188:	691a      	ldr	r2, [r3, #16]
 800118a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800118c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800118e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001190:	1c53      	adds	r3, r2, #1
 8001192:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001194:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001196:	3b01      	subs	r3, #1
 8001198:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800119a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800119c:	b29b      	uxth	r3, r3
 800119e:	3b01      	subs	r3, #1
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80011a4:	6823      	ldr	r3, [r4, #0]
 80011a6:	691b      	ldr	r3, [r3, #16]
 80011a8:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80011aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80011ac:	3301      	adds	r3, #1
 80011ae:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80011b0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80011b2:	3b01      	subs	r3, #1
 80011b4:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80011b6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	3b01      	subs	r3, #1
 80011bc:	b29b      	uxth	r3, r3
 80011be:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80011c0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d07f      	beq.n	80012c6 <HAL_I2C_Mem_Read+0x2b2>
      if (hi2c->XferSize <= 3U)
 80011c6:	2b03      	cmp	r3, #3
 80011c8:	d854      	bhi.n	8001274 <HAL_I2C_Mem_Read+0x260>
        if (hi2c->XferSize == 1U)
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d0b4      	beq.n	8001138 <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d0ca      	beq.n	8001168 <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80011d2:	9500      	str	r5, [sp, #0]
 80011d4:	4633      	mov	r3, r6
 80011d6:	2200      	movs	r2, #0
 80011d8:	4925      	ldr	r1, [pc, #148]	@ (8001270 <HAL_I2C_Mem_Read+0x25c>)
 80011da:	4620      	mov	r0, r4
 80011dc:	f7ff fb57 	bl	800088e <I2C_WaitOnFlagUntilTimeout>
 80011e0:	2800      	cmp	r0, #0
 80011e2:	f040 8083 	bne.w	80012ec <HAL_I2C_Mem_Read+0x2d8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80011e6:	6822      	ldr	r2, [r4, #0]
 80011e8:	6813      	ldr	r3, [r2, #0]
 80011ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80011ee:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80011f0:	6823      	ldr	r3, [r4, #0]
 80011f2:	691a      	ldr	r2, [r3, #16]
 80011f4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80011f6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80011f8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80011fa:	3301      	adds	r3, #1
 80011fc:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80011fe:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001200:	3b01      	subs	r3, #1
 8001202:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001204:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001206:	b29b      	uxth	r3, r3
 8001208:	3b01      	subs	r3, #1
 800120a:	b29b      	uxth	r3, r3
 800120c:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800120e:	9500      	str	r5, [sp, #0]
 8001210:	4633      	mov	r3, r6
 8001212:	2200      	movs	r2, #0
 8001214:	4916      	ldr	r1, [pc, #88]	@ (8001270 <HAL_I2C_Mem_Read+0x25c>)
 8001216:	4620      	mov	r0, r4
 8001218:	f7ff fb39 	bl	800088e <I2C_WaitOnFlagUntilTimeout>
 800121c:	2800      	cmp	r0, #0
 800121e:	d167      	bne.n	80012f0 <HAL_I2C_Mem_Read+0x2dc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001220:	6822      	ldr	r2, [r4, #0]
 8001222:	6813      	ldr	r3, [r2, #0]
 8001224:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001228:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800122a:	6823      	ldr	r3, [r4, #0]
 800122c:	691a      	ldr	r2, [r3, #16]
 800122e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001230:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001232:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001234:	1c53      	adds	r3, r2, #1
 8001236:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001238:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800123a:	3b01      	subs	r3, #1
 800123c:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800123e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001240:	b29b      	uxth	r3, r3
 8001242:	3b01      	subs	r3, #1
 8001244:	b29b      	uxth	r3, r3
 8001246:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001248:	6823      	ldr	r3, [r4, #0]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800124e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001250:	3301      	adds	r3, #1
 8001252:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001254:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001256:	3b01      	subs	r3, #1
 8001258:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800125a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800125c:	b29b      	uxth	r3, r3
 800125e:	3b01      	subs	r3, #1
 8001260:	b29b      	uxth	r3, r3
 8001262:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8001264:	e7ac      	b.n	80011c0 <HAL_I2C_Mem_Read+0x1ac>
 8001266:	bf00      	nop
 8001268:	00100002 	.word	0x00100002
 800126c:	ffff0000 	.word	0xffff0000
 8001270:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001274:	462a      	mov	r2, r5
 8001276:	4631      	mov	r1, r6
 8001278:	4620      	mov	r0, r4
 800127a:	f7ff fd05 	bl	8000c88 <I2C_WaitOnRXNEFlagUntilTimeout>
 800127e:	2800      	cmp	r0, #0
 8001280:	d138      	bne.n	80012f4 <HAL_I2C_Mem_Read+0x2e0>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001282:	6823      	ldr	r3, [r4, #0]
 8001284:	691a      	ldr	r2, [r3, #16]
 8001286:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001288:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800128a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800128c:	1c53      	adds	r3, r2, #1
 800128e:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8001290:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001292:	3b01      	subs	r3, #1
 8001294:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8001296:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001298:	b29b      	uxth	r3, r3
 800129a:	3b01      	subs	r3, #1
 800129c:	b29b      	uxth	r3, r3
 800129e:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80012a0:	6823      	ldr	r3, [r4, #0]
 80012a2:	6959      	ldr	r1, [r3, #20]
 80012a4:	f011 0f04 	tst.w	r1, #4
 80012a8:	d08a      	beq.n	80011c0 <HAL_I2C_Mem_Read+0x1ac>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80012ae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80012b0:	3301      	adds	r3, #1
 80012b2:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80012b4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80012b6:	3b01      	subs	r3, #1
 80012b8:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80012ba:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80012bc:	b29b      	uxth	r3, r3
 80012be:	3b01      	subs	r3, #1
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80012c4:	e77c      	b.n	80011c0 <HAL_I2C_Mem_Read+0x1ac>
    hi2c->State = HAL_I2C_STATE_READY;
 80012c6:	2320      	movs	r3, #32
 80012c8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 80012d2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 80012d6:	e6ae      	b.n	8001036 <HAL_I2C_Mem_Read+0x22>
      return HAL_BUSY;
 80012d8:	2702      	movs	r7, #2
 80012da:	e6ac      	b.n	8001036 <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 80012dc:	2702      	movs	r7, #2
 80012de:	e6aa      	b.n	8001036 <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 80012e0:	2701      	movs	r7, #1
 80012e2:	e6a8      	b.n	8001036 <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 80012e4:	2701      	movs	r7, #1
 80012e6:	e6a6      	b.n	8001036 <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 80012e8:	2701      	movs	r7, #1
 80012ea:	e6a4      	b.n	8001036 <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 80012ec:	2701      	movs	r7, #1
 80012ee:	e6a2      	b.n	8001036 <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 80012f0:	2701      	movs	r7, #1
 80012f2:	e6a0      	b.n	8001036 <HAL_I2C_Mem_Read+0x22>
          return HAL_ERROR;
 80012f4:	2701      	movs	r7, #1
 80012f6:	e69e      	b.n	8001036 <HAL_I2C_Mem_Read+0x22>

080012f8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f8:	2800      	cmp	r0, #0
 80012fa:	f000 81e0 	beq.w	80016be <HAL_RCC_OscConfig+0x3c6>
{
 80012fe:	b570      	push	{r4, r5, r6, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001304:	6803      	ldr	r3, [r0, #0]
 8001306:	f013 0f01 	tst.w	r3, #1
 800130a:	d03b      	beq.n	8001384 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800130c:	4b9f      	ldr	r3, [pc, #636]	@ (800158c <HAL_RCC_OscConfig+0x294>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 030c 	and.w	r3, r3, #12
 8001314:	2b04      	cmp	r3, #4
 8001316:	d02c      	beq.n	8001372 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001318:	4b9c      	ldr	r3, [pc, #624]	@ (800158c <HAL_RCC_OscConfig+0x294>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001320:	2b08      	cmp	r3, #8
 8001322:	d021      	beq.n	8001368 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001324:	6863      	ldr	r3, [r4, #4]
 8001326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800132a:	d04f      	beq.n	80013cc <HAL_RCC_OscConfig+0xd4>
 800132c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001330:	d052      	beq.n	80013d8 <HAL_RCC_OscConfig+0xe0>
 8001332:	4b96      	ldr	r3, [pc, #600]	@ (800158c <HAL_RCC_OscConfig+0x294>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001342:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001344:	6863      	ldr	r3, [r4, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d050      	beq.n	80013ec <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134a:	f7ff f907 	bl	800055c <HAL_GetTick>
 800134e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001350:	4b8e      	ldr	r3, [pc, #568]	@ (800158c <HAL_RCC_OscConfig+0x294>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001358:	d114      	bne.n	8001384 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800135a:	f7ff f8ff 	bl	800055c <HAL_GetTick>
 800135e:	1b40      	subs	r0, r0, r5
 8001360:	2864      	cmp	r0, #100	@ 0x64
 8001362:	d9f5      	bls.n	8001350 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001364:	2003      	movs	r0, #3
 8001366:	e1b1      	b.n	80016cc <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001368:	4b88      	ldr	r3, [pc, #544]	@ (800158c <HAL_RCC_OscConfig+0x294>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001370:	d0d8      	beq.n	8001324 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001372:	4b86      	ldr	r3, [pc, #536]	@ (800158c <HAL_RCC_OscConfig+0x294>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800137a:	d003      	beq.n	8001384 <HAL_RCC_OscConfig+0x8c>
 800137c:	6863      	ldr	r3, [r4, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 819f 	beq.w	80016c2 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001384:	6823      	ldr	r3, [r4, #0]
 8001386:	f013 0f02 	tst.w	r3, #2
 800138a:	d054      	beq.n	8001436 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800138c:	4b7f      	ldr	r3, [pc, #508]	@ (800158c <HAL_RCC_OscConfig+0x294>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f013 0f0c 	tst.w	r3, #12
 8001394:	d03e      	beq.n	8001414 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001396:	4b7d      	ldr	r3, [pc, #500]	@ (800158c <HAL_RCC_OscConfig+0x294>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d033      	beq.n	800140a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013a2:	68e3      	ldr	r3, [r4, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d068      	beq.n	800147a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a8:	4b79      	ldr	r3, [pc, #484]	@ (8001590 <HAL_RCC_OscConfig+0x298>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ae:	f7ff f8d5 	bl	800055c <HAL_GetTick>
 80013b2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b4:	4b75      	ldr	r3, [pc, #468]	@ (800158c <HAL_RCC_OscConfig+0x294>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f013 0f02 	tst.w	r3, #2
 80013bc:	d154      	bne.n	8001468 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013be:	f7ff f8cd 	bl	800055c <HAL_GetTick>
 80013c2:	1b40      	subs	r0, r0, r5
 80013c4:	2802      	cmp	r0, #2
 80013c6:	d9f5      	bls.n	80013b4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80013c8:	2003      	movs	r0, #3
 80013ca:	e17f      	b.n	80016cc <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013cc:	4a6f      	ldr	r2, [pc, #444]	@ (800158c <HAL_RCC_OscConfig+0x294>)
 80013ce:	6813      	ldr	r3, [r2, #0]
 80013d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e7b5      	b.n	8001344 <HAL_RCC_OscConfig+0x4c>
 80013d8:	4b6c      	ldr	r3, [pc, #432]	@ (800158c <HAL_RCC_OscConfig+0x294>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	e7ab      	b.n	8001344 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80013ec:	f7ff f8b6 	bl	800055c <HAL_GetTick>
 80013f0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f2:	4b66      	ldr	r3, [pc, #408]	@ (800158c <HAL_RCC_OscConfig+0x294>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80013fa:	d0c3      	beq.n	8001384 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013fc:	f7ff f8ae 	bl	800055c <HAL_GetTick>
 8001400:	1b40      	subs	r0, r0, r5
 8001402:	2864      	cmp	r0, #100	@ 0x64
 8001404:	d9f5      	bls.n	80013f2 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001406:	2003      	movs	r0, #3
 8001408:	e160      	b.n	80016cc <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800140a:	4b60      	ldr	r3, [pc, #384]	@ (800158c <HAL_RCC_OscConfig+0x294>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001412:	d1c6      	bne.n	80013a2 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001414:	4b5d      	ldr	r3, [pc, #372]	@ (800158c <HAL_RCC_OscConfig+0x294>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f013 0f02 	tst.w	r3, #2
 800141c:	d003      	beq.n	8001426 <HAL_RCC_OscConfig+0x12e>
 800141e:	68e3      	ldr	r3, [r4, #12]
 8001420:	2b01      	cmp	r3, #1
 8001422:	f040 8150 	bne.w	80016c6 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001426:	4a59      	ldr	r2, [pc, #356]	@ (800158c <HAL_RCC_OscConfig+0x294>)
 8001428:	6813      	ldr	r3, [r2, #0]
 800142a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800142e:	6921      	ldr	r1, [r4, #16]
 8001430:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001434:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001436:	6823      	ldr	r3, [r4, #0]
 8001438:	f013 0f08 	tst.w	r3, #8
 800143c:	d042      	beq.n	80014c4 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800143e:	6963      	ldr	r3, [r4, #20]
 8001440:	b36b      	cbz	r3, 800149e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001442:	4b53      	ldr	r3, [pc, #332]	@ (8001590 <HAL_RCC_OscConfig+0x298>)
 8001444:	2201      	movs	r2, #1
 8001446:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144a:	f7ff f887 	bl	800055c <HAL_GetTick>
 800144e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001450:	4b4e      	ldr	r3, [pc, #312]	@ (800158c <HAL_RCC_OscConfig+0x294>)
 8001452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001454:	f013 0f02 	tst.w	r3, #2
 8001458:	d134      	bne.n	80014c4 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145a:	f7ff f87f 	bl	800055c <HAL_GetTick>
 800145e:	1b40      	subs	r0, r0, r5
 8001460:	2802      	cmp	r0, #2
 8001462:	d9f5      	bls.n	8001450 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001464:	2003      	movs	r0, #3
 8001466:	e131      	b.n	80016cc <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001468:	4a48      	ldr	r2, [pc, #288]	@ (800158c <HAL_RCC_OscConfig+0x294>)
 800146a:	6813      	ldr	r3, [r2, #0]
 800146c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001470:	6921      	ldr	r1, [r4, #16]
 8001472:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	e7dd      	b.n	8001436 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800147a:	4b45      	ldr	r3, [pc, #276]	@ (8001590 <HAL_RCC_OscConfig+0x298>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001480:	f7ff f86c 	bl	800055c <HAL_GetTick>
 8001484:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001486:	4b41      	ldr	r3, [pc, #260]	@ (800158c <HAL_RCC_OscConfig+0x294>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f013 0f02 	tst.w	r3, #2
 800148e:	d0d2      	beq.n	8001436 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001490:	f7ff f864 	bl	800055c <HAL_GetTick>
 8001494:	1b40      	subs	r0, r0, r5
 8001496:	2802      	cmp	r0, #2
 8001498:	d9f5      	bls.n	8001486 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800149a:	2003      	movs	r0, #3
 800149c:	e116      	b.n	80016cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800149e:	4b3c      	ldr	r3, [pc, #240]	@ (8001590 <HAL_RCC_OscConfig+0x298>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a6:	f7ff f859 	bl	800055c <HAL_GetTick>
 80014aa:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ac:	4b37      	ldr	r3, [pc, #220]	@ (800158c <HAL_RCC_OscConfig+0x294>)
 80014ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014b0:	f013 0f02 	tst.w	r3, #2
 80014b4:	d006      	beq.n	80014c4 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b6:	f7ff f851 	bl	800055c <HAL_GetTick>
 80014ba:	1b40      	subs	r0, r0, r5
 80014bc:	2802      	cmp	r0, #2
 80014be:	d9f5      	bls.n	80014ac <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80014c0:	2003      	movs	r0, #3
 80014c2:	e103      	b.n	80016cc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c4:	6823      	ldr	r3, [r4, #0]
 80014c6:	f013 0f04 	tst.w	r3, #4
 80014ca:	d077      	beq.n	80015bc <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014cc:	4b2f      	ldr	r3, [pc, #188]	@ (800158c <HAL_RCC_OscConfig+0x294>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80014d4:	d133      	bne.n	800153e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	4b2c      	ldr	r3, [pc, #176]	@ (800158c <HAL_RCC_OscConfig+0x294>)
 80014dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014de:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80014e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ea:	9301      	str	r3, [sp, #4]
 80014ec:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80014ee:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f0:	4b28      	ldr	r3, [pc, #160]	@ (8001594 <HAL_RCC_OscConfig+0x29c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80014f8:	d023      	beq.n	8001542 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014fa:	68a3      	ldr	r3, [r4, #8]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d034      	beq.n	800156a <HAL_RCC_OscConfig+0x272>
 8001500:	2b05      	cmp	r3, #5
 8001502:	d038      	beq.n	8001576 <HAL_RCC_OscConfig+0x27e>
 8001504:	4b21      	ldr	r3, [pc, #132]	@ (800158c <HAL_RCC_OscConfig+0x294>)
 8001506:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001508:	f022 0201 	bic.w	r2, r2, #1
 800150c:	671a      	str	r2, [r3, #112]	@ 0x70
 800150e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001510:	f022 0204 	bic.w	r2, r2, #4
 8001514:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001516:	68a3      	ldr	r3, [r4, #8]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d03d      	beq.n	8001598 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800151c:	f7ff f81e 	bl	800055c <HAL_GetTick>
 8001520:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001522:	4b1a      	ldr	r3, [pc, #104]	@ (800158c <HAL_RCC_OscConfig+0x294>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001526:	f013 0f02 	tst.w	r3, #2
 800152a:	d146      	bne.n	80015ba <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800152c:	f7ff f816 	bl	800055c <HAL_GetTick>
 8001530:	1b80      	subs	r0, r0, r6
 8001532:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001536:	4298      	cmp	r0, r3
 8001538:	d9f3      	bls.n	8001522 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800153a:	2003      	movs	r0, #3
 800153c:	e0c6      	b.n	80016cc <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 800153e:	2500      	movs	r5, #0
 8001540:	e7d6      	b.n	80014f0 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001542:	4a14      	ldr	r2, [pc, #80]	@ (8001594 <HAL_RCC_OscConfig+0x29c>)
 8001544:	6813      	ldr	r3, [r2, #0]
 8001546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800154a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800154c:	f7ff f806 	bl	800055c <HAL_GetTick>
 8001550:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001552:	4b10      	ldr	r3, [pc, #64]	@ (8001594 <HAL_RCC_OscConfig+0x29c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800155a:	d1ce      	bne.n	80014fa <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155c:	f7fe fffe 	bl	800055c <HAL_GetTick>
 8001560:	1b80      	subs	r0, r0, r6
 8001562:	2802      	cmp	r0, #2
 8001564:	d9f5      	bls.n	8001552 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8001566:	2003      	movs	r0, #3
 8001568:	e0b0      	b.n	80016cc <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800156a:	4a08      	ldr	r2, [pc, #32]	@ (800158c <HAL_RCC_OscConfig+0x294>)
 800156c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6713      	str	r3, [r2, #112]	@ 0x70
 8001574:	e7cf      	b.n	8001516 <HAL_RCC_OscConfig+0x21e>
 8001576:	4b05      	ldr	r3, [pc, #20]	@ (800158c <HAL_RCC_OscConfig+0x294>)
 8001578:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800157a:	f042 0204 	orr.w	r2, r2, #4
 800157e:	671a      	str	r2, [r3, #112]	@ 0x70
 8001580:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001582:	f042 0201 	orr.w	r2, r2, #1
 8001586:	671a      	str	r2, [r3, #112]	@ 0x70
 8001588:	e7c5      	b.n	8001516 <HAL_RCC_OscConfig+0x21e>
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	42470000 	.word	0x42470000
 8001594:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001598:	f7fe ffe0 	bl	800055c <HAL_GetTick>
 800159c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159e:	4b52      	ldr	r3, [pc, #328]	@ (80016e8 <HAL_RCC_OscConfig+0x3f0>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a2:	f013 0f02 	tst.w	r3, #2
 80015a6:	d008      	beq.n	80015ba <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a8:	f7fe ffd8 	bl	800055c <HAL_GetTick>
 80015ac:	1b80      	subs	r0, r0, r6
 80015ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80015b2:	4298      	cmp	r0, r3
 80015b4:	d9f3      	bls.n	800159e <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80015b6:	2003      	movs	r0, #3
 80015b8:	e088      	b.n	80016cc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ba:	b9ed      	cbnz	r5, 80015f8 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015bc:	69a3      	ldr	r3, [r4, #24]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 8083 	beq.w	80016ca <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015c4:	4a48      	ldr	r2, [pc, #288]	@ (80016e8 <HAL_RCC_OscConfig+0x3f0>)
 80015c6:	6892      	ldr	r2, [r2, #8]
 80015c8:	f002 020c 	and.w	r2, r2, #12
 80015cc:	2a08      	cmp	r2, #8
 80015ce:	d051      	beq.n	8001674 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d017      	beq.n	8001604 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d4:	4b45      	ldr	r3, [pc, #276]	@ (80016ec <HAL_RCC_OscConfig+0x3f4>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015da:	f7fe ffbf 	bl	800055c <HAL_GetTick>
 80015de:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e0:	4b41      	ldr	r3, [pc, #260]	@ (80016e8 <HAL_RCC_OscConfig+0x3f0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80015e8:	d042      	beq.n	8001670 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ea:	f7fe ffb7 	bl	800055c <HAL_GetTick>
 80015ee:	1b00      	subs	r0, r0, r4
 80015f0:	2802      	cmp	r0, #2
 80015f2:	d9f5      	bls.n	80015e0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80015f4:	2003      	movs	r0, #3
 80015f6:	e069      	b.n	80016cc <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f8:	4a3b      	ldr	r2, [pc, #236]	@ (80016e8 <HAL_RCC_OscConfig+0x3f0>)
 80015fa:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80015fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001600:	6413      	str	r3, [r2, #64]	@ 0x40
 8001602:	e7db      	b.n	80015bc <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001604:	4b39      	ldr	r3, [pc, #228]	@ (80016ec <HAL_RCC_OscConfig+0x3f4>)
 8001606:	2200      	movs	r2, #0
 8001608:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800160a:	f7fe ffa7 	bl	800055c <HAL_GetTick>
 800160e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001610:	4b35      	ldr	r3, [pc, #212]	@ (80016e8 <HAL_RCC_OscConfig+0x3f0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001618:	d006      	beq.n	8001628 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161a:	f7fe ff9f 	bl	800055c <HAL_GetTick>
 800161e:	1b40      	subs	r0, r0, r5
 8001620:	2802      	cmp	r0, #2
 8001622:	d9f5      	bls.n	8001610 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001624:	2003      	movs	r0, #3
 8001626:	e051      	b.n	80016cc <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001628:	69e3      	ldr	r3, [r4, #28]
 800162a:	6a22      	ldr	r2, [r4, #32]
 800162c:	4313      	orrs	r3, r2
 800162e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001630:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001634:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001636:	0852      	lsrs	r2, r2, #1
 8001638:	3a01      	subs	r2, #1
 800163a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800163e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001640:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001644:	4a28      	ldr	r2, [pc, #160]	@ (80016e8 <HAL_RCC_OscConfig+0x3f0>)
 8001646:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001648:	4b28      	ldr	r3, [pc, #160]	@ (80016ec <HAL_RCC_OscConfig+0x3f4>)
 800164a:	2201      	movs	r2, #1
 800164c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800164e:	f7fe ff85 	bl	800055c <HAL_GetTick>
 8001652:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001654:	4b24      	ldr	r3, [pc, #144]	@ (80016e8 <HAL_RCC_OscConfig+0x3f0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800165c:	d106      	bne.n	800166c <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165e:	f7fe ff7d 	bl	800055c <HAL_GetTick>
 8001662:	1b00      	subs	r0, r0, r4
 8001664:	2802      	cmp	r0, #2
 8001666:	d9f5      	bls.n	8001654 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001668:	2003      	movs	r0, #3
 800166a:	e02f      	b.n	80016cc <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800166c:	2000      	movs	r0, #0
 800166e:	e02d      	b.n	80016cc <HAL_RCC_OscConfig+0x3d4>
 8001670:	2000      	movs	r0, #0
 8001672:	e02b      	b.n	80016cc <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001674:	2b01      	cmp	r3, #1
 8001676:	d02b      	beq.n	80016d0 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8001678:	4b1b      	ldr	r3, [pc, #108]	@ (80016e8 <HAL_RCC_OscConfig+0x3f0>)
 800167a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001680:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001682:	4291      	cmp	r1, r2
 8001684:	d126      	bne.n	80016d4 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001686:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800168a:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168c:	428a      	cmp	r2, r1
 800168e:	d123      	bne.n	80016d8 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001690:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001692:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001696:	401a      	ands	r2, r3
 8001698:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800169c:	d11e      	bne.n	80016dc <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800169e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80016a2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80016a4:	0852      	lsrs	r2, r2, #1
 80016a6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016a8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80016ac:	d118      	bne.n	80016e0 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016ae:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80016b2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016b4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80016b8:	d114      	bne.n	80016e4 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80016ba:	2000      	movs	r0, #0
 80016bc:	e006      	b.n	80016cc <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 80016be:	2001      	movs	r0, #1
}
 80016c0:	4770      	bx	lr
        return HAL_ERROR;
 80016c2:	2001      	movs	r0, #1
 80016c4:	e002      	b.n	80016cc <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80016c6:	2001      	movs	r0, #1
 80016c8:	e000      	b.n	80016cc <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80016ca:	2000      	movs	r0, #0
}
 80016cc:	b002      	add	sp, #8
 80016ce:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80016d0:	2001      	movs	r0, #1
 80016d2:	e7fb      	b.n	80016cc <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80016d4:	2001      	movs	r0, #1
 80016d6:	e7f9      	b.n	80016cc <HAL_RCC_OscConfig+0x3d4>
 80016d8:	2001      	movs	r0, #1
 80016da:	e7f7      	b.n	80016cc <HAL_RCC_OscConfig+0x3d4>
 80016dc:	2001      	movs	r0, #1
 80016de:	e7f5      	b.n	80016cc <HAL_RCC_OscConfig+0x3d4>
 80016e0:	2001      	movs	r0, #1
 80016e2:	e7f3      	b.n	80016cc <HAL_RCC_OscConfig+0x3d4>
 80016e4:	2001      	movs	r0, #1
 80016e6:	e7f1      	b.n	80016cc <HAL_RCC_OscConfig+0x3d4>
 80016e8:	40023800 	.word	0x40023800
 80016ec:	42470000 	.word	0x42470000

080016f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016f0:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016f2:	4b26      	ldr	r3, [pc, #152]	@ (800178c <HAL_RCC_GetSysClockFreq+0x9c>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	d041      	beq.n	8001782 <HAL_RCC_GetSysClockFreq+0x92>
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d141      	bne.n	8001786 <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001702:	4b22      	ldr	r3, [pc, #136]	@ (800178c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001710:	d012      	beq.n	8001738 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001712:	4b1e      	ldr	r3, [pc, #120]	@ (800178c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001714:	6859      	ldr	r1, [r3, #4]
 8001716:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800171a:	481d      	ldr	r0, [pc, #116]	@ (8001790 <HAL_RCC_GetSysClockFreq+0xa0>)
 800171c:	2300      	movs	r3, #0
 800171e:	fba1 0100 	umull	r0, r1, r1, r0
 8001722:	f7fe fd59 	bl	80001d8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001726:	4b19      	ldr	r3, [pc, #100]	@ (800178c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800172e:	3301      	adds	r3, #1
 8001730:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001732:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001736:	e027      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x98>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001738:	4b14      	ldr	r3, [pc, #80]	@ (800178c <HAL_RCC_GetSysClockFreq+0x9c>)
 800173a:	6858      	ldr	r0, [r3, #4]
 800173c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001740:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001744:	ebbc 0c00 	subs.w	ip, ip, r0
 8001748:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800174c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001750:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001754:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001758:	ebb1 010c 	subs.w	r1, r1, ip
 800175c:	eb63 030e 	sbc.w	r3, r3, lr
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001766:	00c9      	lsls	r1, r1, #3
 8001768:	eb11 0c00 	adds.w	ip, r1, r0
 800176c:	f143 0300 	adc.w	r3, r3, #0
 8001770:	0299      	lsls	r1, r3, #10
 8001772:	2300      	movs	r3, #0
 8001774:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001778:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800177c:	f7fe fd2c 	bl	80001d8 <__aeabi_uldivmod>
 8001780:	e7d1      	b.n	8001726 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001782:	4803      	ldr	r0, [pc, #12]	@ (8001790 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001784:	e000      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x98>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001786:	4803      	ldr	r0, [pc, #12]	@ (8001794 <HAL_RCC_GetSysClockFreq+0xa4>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001788:	bd08      	pop	{r3, pc}
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800
 8001790:	017d7840 	.word	0x017d7840
 8001794:	00f42400 	.word	0x00f42400

08001798 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001798:	2800      	cmp	r0, #0
 800179a:	f000 809b 	beq.w	80018d4 <HAL_RCC_ClockConfig+0x13c>
{
 800179e:	b570      	push	{r4, r5, r6, lr}
 80017a0:	460d      	mov	r5, r1
 80017a2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a4:	4b4f      	ldr	r3, [pc, #316]	@ (80018e4 <HAL_RCC_ClockConfig+0x14c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	428b      	cmp	r3, r1
 80017ae:	d208      	bcs.n	80017c2 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b0:	b2cb      	uxtb	r3, r1
 80017b2:	4a4c      	ldr	r2, [pc, #304]	@ (80018e4 <HAL_RCC_ClockConfig+0x14c>)
 80017b4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b6:	6813      	ldr	r3, [r2, #0]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	428b      	cmp	r3, r1
 80017be:	f040 808b 	bne.w	80018d8 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c2:	6823      	ldr	r3, [r4, #0]
 80017c4:	f013 0f02 	tst.w	r3, #2
 80017c8:	d017      	beq.n	80017fa <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ca:	f013 0f04 	tst.w	r3, #4
 80017ce:	d004      	beq.n	80017da <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d0:	4a45      	ldr	r2, [pc, #276]	@ (80018e8 <HAL_RCC_ClockConfig+0x150>)
 80017d2:	6893      	ldr	r3, [r2, #8]
 80017d4:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017d8:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	f013 0f08 	tst.w	r3, #8
 80017e0:	d004      	beq.n	80017ec <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e2:	4a41      	ldr	r2, [pc, #260]	@ (80018e8 <HAL_RCC_ClockConfig+0x150>)
 80017e4:	6893      	ldr	r3, [r2, #8]
 80017e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017ea:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ec:	4a3e      	ldr	r2, [pc, #248]	@ (80018e8 <HAL_RCC_ClockConfig+0x150>)
 80017ee:	6893      	ldr	r3, [r2, #8]
 80017f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80017f4:	68a1      	ldr	r1, [r4, #8]
 80017f6:	430b      	orrs	r3, r1
 80017f8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fa:	6823      	ldr	r3, [r4, #0]
 80017fc:	f013 0f01 	tst.w	r3, #1
 8001800:	d032      	beq.n	8001868 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001802:	6863      	ldr	r3, [r4, #4]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d021      	beq.n	800184c <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001808:	1e9a      	subs	r2, r3, #2
 800180a:	2a01      	cmp	r2, #1
 800180c:	d925      	bls.n	800185a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180e:	4a36      	ldr	r2, [pc, #216]	@ (80018e8 <HAL_RCC_ClockConfig+0x150>)
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	f012 0f02 	tst.w	r2, #2
 8001816:	d061      	beq.n	80018dc <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001818:	4933      	ldr	r1, [pc, #204]	@ (80018e8 <HAL_RCC_ClockConfig+0x150>)
 800181a:	688a      	ldr	r2, [r1, #8]
 800181c:	f022 0203 	bic.w	r2, r2, #3
 8001820:	4313      	orrs	r3, r2
 8001822:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001824:	f7fe fe9a 	bl	800055c <HAL_GetTick>
 8001828:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182a:	4b2f      	ldr	r3, [pc, #188]	@ (80018e8 <HAL_RCC_ClockConfig+0x150>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 030c 	and.w	r3, r3, #12
 8001832:	6862      	ldr	r2, [r4, #4]
 8001834:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001838:	d016      	beq.n	8001868 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183a:	f7fe fe8f 	bl	800055c <HAL_GetTick>
 800183e:	1b80      	subs	r0, r0, r6
 8001840:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001844:	4298      	cmp	r0, r3
 8001846:	d9f0      	bls.n	800182a <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001848:	2003      	movs	r0, #3
 800184a:	e042      	b.n	80018d2 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184c:	4a26      	ldr	r2, [pc, #152]	@ (80018e8 <HAL_RCC_ClockConfig+0x150>)
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001854:	d1e0      	bne.n	8001818 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001856:	2001      	movs	r0, #1
 8001858:	e03b      	b.n	80018d2 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185a:	4a23      	ldr	r2, [pc, #140]	@ (80018e8 <HAL_RCC_ClockConfig+0x150>)
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001862:	d1d9      	bne.n	8001818 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001864:	2001      	movs	r0, #1
 8001866:	e034      	b.n	80018d2 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001868:	4b1e      	ldr	r3, [pc, #120]	@ (80018e4 <HAL_RCC_ClockConfig+0x14c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	42ab      	cmp	r3, r5
 8001872:	d907      	bls.n	8001884 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001874:	b2ea      	uxtb	r2, r5
 8001876:	4b1b      	ldr	r3, [pc, #108]	@ (80018e4 <HAL_RCC_ClockConfig+0x14c>)
 8001878:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	42ab      	cmp	r3, r5
 8001882:	d12d      	bne.n	80018e0 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001884:	6823      	ldr	r3, [r4, #0]
 8001886:	f013 0f04 	tst.w	r3, #4
 800188a:	d006      	beq.n	800189a <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800188c:	4a16      	ldr	r2, [pc, #88]	@ (80018e8 <HAL_RCC_ClockConfig+0x150>)
 800188e:	6893      	ldr	r3, [r2, #8]
 8001890:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001894:	68e1      	ldr	r1, [r4, #12]
 8001896:	430b      	orrs	r3, r1
 8001898:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189a:	6823      	ldr	r3, [r4, #0]
 800189c:	f013 0f08 	tst.w	r3, #8
 80018a0:	d007      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018a2:	4a11      	ldr	r2, [pc, #68]	@ (80018e8 <HAL_RCC_ClockConfig+0x150>)
 80018a4:	6893      	ldr	r3, [r2, #8]
 80018a6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80018aa:	6921      	ldr	r1, [r4, #16]
 80018ac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80018b0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018b2:	f7ff ff1d 	bl	80016f0 <HAL_RCC_GetSysClockFreq>
 80018b6:	4b0c      	ldr	r3, [pc, #48]	@ (80018e8 <HAL_RCC_ClockConfig+0x150>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80018be:	4a0b      	ldr	r2, [pc, #44]	@ (80018ec <HAL_RCC_ClockConfig+0x154>)
 80018c0:	5cd3      	ldrb	r3, [r2, r3]
 80018c2:	40d8      	lsrs	r0, r3
 80018c4:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <HAL_RCC_ClockConfig+0x158>)
 80018c6:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80018c8:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <HAL_RCC_ClockConfig+0x15c>)
 80018ca:	6818      	ldr	r0, [r3, #0]
 80018cc:	f7fe fdfc 	bl	80004c8 <HAL_InitTick>
  return HAL_OK;
 80018d0:	2000      	movs	r0, #0
}
 80018d2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80018d4:	2001      	movs	r0, #1
}
 80018d6:	4770      	bx	lr
      return HAL_ERROR;
 80018d8:	2001      	movs	r0, #1
 80018da:	e7fa      	b.n	80018d2 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80018dc:	2001      	movs	r0, #1
 80018de:	e7f8      	b.n	80018d2 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80018e0:	2001      	movs	r0, #1
 80018e2:	e7f6      	b.n	80018d2 <HAL_RCC_ClockConfig+0x13a>
 80018e4:	40023c00 	.word	0x40023c00
 80018e8:	40023800 	.word	0x40023800
 80018ec:	080052a4 	.word	0x080052a4
 80018f0:	20000048 	.word	0x20000048
 80018f4:	20000004 	.word	0x20000004

080018f8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80018f8:	4b01      	ldr	r3, [pc, #4]	@ (8001900 <HAL_RCC_GetHCLKFreq+0x8>)
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000048 	.word	0x20000048

08001904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001904:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001906:	f7ff fff7 	bl	80018f8 <HAL_RCC_GetHCLKFreq>
 800190a:	4b04      	ldr	r3, [pc, #16]	@ (800191c <HAL_RCC_GetPCLK1Freq+0x18>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001912:	4a03      	ldr	r2, [pc, #12]	@ (8001920 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001914:	5cd3      	ldrb	r3, [r2, r3]
}
 8001916:	40d8      	lsrs	r0, r3
 8001918:	bd08      	pop	{r3, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	080052b4 	.word	0x080052b4

08001924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001924:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001926:	f7ff ffe7 	bl	80018f8 <HAL_RCC_GetHCLKFreq>
 800192a:	4b04      	ldr	r3, [pc, #16]	@ (800193c <HAL_RCC_GetPCLK2Freq+0x18>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001932:	4a03      	ldr	r2, [pc, #12]	@ (8001940 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001934:	5cd3      	ldrb	r3, [r2, r3]
}
 8001936:	40d8      	lsrs	r0, r3
 8001938:	bd08      	pop	{r3, pc}
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	080052b4 	.word	0x080052b4

08001944 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001944:	b510      	push	{r4, lr}
 8001946:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001948:	6802      	ldr	r2, [r0, #0]
 800194a:	6913      	ldr	r3, [r2, #16]
 800194c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001950:	68c1      	ldr	r1, [r0, #12]
 8001952:	430b      	orrs	r3, r1
 8001954:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001956:	6883      	ldr	r3, [r0, #8]
 8001958:	6902      	ldr	r2, [r0, #16]
 800195a:	431a      	orrs	r2, r3
 800195c:	6943      	ldr	r3, [r0, #20]
 800195e:	431a      	orrs	r2, r3
 8001960:	69c3      	ldr	r3, [r0, #28]
 8001962:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001964:	6801      	ldr	r1, [r0, #0]
 8001966:	68cb      	ldr	r3, [r1, #12]
 8001968:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800196c:	f023 030c 	bic.w	r3, r3, #12
 8001970:	4313      	orrs	r3, r2
 8001972:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001974:	6802      	ldr	r2, [r0, #0]
 8001976:	6953      	ldr	r3, [r2, #20]
 8001978:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800197c:	6981      	ldr	r1, [r0, #24]
 800197e:	430b      	orrs	r3, r1
 8001980:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001982:	6803      	ldr	r3, [r0, #0]
 8001984:	4a31      	ldr	r2, [pc, #196]	@ (8001a4c <UART_SetConfig+0x108>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d006      	beq.n	8001998 <UART_SetConfig+0x54>
 800198a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800198e:	4293      	cmp	r3, r2
 8001990:	d002      	beq.n	8001998 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001992:	f7ff ffb7 	bl	8001904 <HAL_RCC_GetPCLK1Freq>
 8001996:	e001      	b.n	800199c <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001998:	f7ff ffc4 	bl	8001924 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800199c:	69e3      	ldr	r3, [r4, #28]
 800199e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80019a2:	d029      	beq.n	80019f8 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80019a4:	2100      	movs	r1, #0
 80019a6:	1803      	adds	r3, r0, r0
 80019a8:	4149      	adcs	r1, r1
 80019aa:	181b      	adds	r3, r3, r0
 80019ac:	f141 0100 	adc.w	r1, r1, #0
 80019b0:	00c9      	lsls	r1, r1, #3
 80019b2:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	1818      	adds	r0, r3, r0
 80019ba:	6863      	ldr	r3, [r4, #4]
 80019bc:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80019c0:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80019c4:	f141 0100 	adc.w	r1, r1, #0
 80019c8:	f7fe fc06 	bl	80001d8 <__aeabi_uldivmod>
 80019cc:	4a20      	ldr	r2, [pc, #128]	@ (8001a50 <UART_SetConfig+0x10c>)
 80019ce:	fba2 3100 	umull	r3, r1, r2, r0
 80019d2:	0949      	lsrs	r1, r1, #5
 80019d4:	2364      	movs	r3, #100	@ 0x64
 80019d6:	fb03 0311 	mls	r3, r3, r1, r0
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	3332      	adds	r3, #50	@ 0x32
 80019de:	fba2 2303 	umull	r2, r3, r2, r3
 80019e2:	095b      	lsrs	r3, r3, #5
 80019e4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019e8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80019ec:	f003 030f 	and.w	r3, r3, #15
 80019f0:	6821      	ldr	r1, [r4, #0]
 80019f2:	4413      	add	r3, r2
 80019f4:	608b      	str	r3, [r1, #8]
  }
}
 80019f6:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80019f8:	2300      	movs	r3, #0
 80019fa:	1802      	adds	r2, r0, r0
 80019fc:	eb43 0103 	adc.w	r1, r3, r3
 8001a00:	1812      	adds	r2, r2, r0
 8001a02:	f141 0100 	adc.w	r1, r1, #0
 8001a06:	00c9      	lsls	r1, r1, #3
 8001a08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a0c:	00d2      	lsls	r2, r2, #3
 8001a0e:	1810      	adds	r0, r2, r0
 8001a10:	f141 0100 	adc.w	r1, r1, #0
 8001a14:	6862      	ldr	r2, [r4, #4]
 8001a16:	1892      	adds	r2, r2, r2
 8001a18:	415b      	adcs	r3, r3
 8001a1a:	f7fe fbdd 	bl	80001d8 <__aeabi_uldivmod>
 8001a1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001a50 <UART_SetConfig+0x10c>)
 8001a20:	fba2 3100 	umull	r3, r1, r2, r0
 8001a24:	0949      	lsrs	r1, r1, #5
 8001a26:	2364      	movs	r3, #100	@ 0x64
 8001a28:	fb03 0311 	mls	r3, r3, r1, r0
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	3332      	adds	r3, #50	@ 0x32
 8001a30:	fba2 2303 	umull	r2, r3, r2, r3
 8001a34:	095b      	lsrs	r3, r3, #5
 8001a36:	005a      	lsls	r2, r3, #1
 8001a38:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8001a3c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	6821      	ldr	r1, [r4, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	608b      	str	r3, [r1, #8]
 8001a4a:	e7d4      	b.n	80019f6 <UART_SetConfig+0xb2>
 8001a4c:	40011000 	.word	0x40011000
 8001a50:	51eb851f 	.word	0x51eb851f

08001a54 <UART_WaitOnFlagUntilTimeout>:
{
 8001a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a58:	4605      	mov	r5, r0
 8001a5a:	460f      	mov	r7, r1
 8001a5c:	4616      	mov	r6, r2
 8001a5e:	4699      	mov	r9, r3
 8001a60:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a64:	682b      	ldr	r3, [r5, #0]
 8001a66:	681c      	ldr	r4, [r3, #0]
 8001a68:	ea37 0404 	bics.w	r4, r7, r4
 8001a6c:	bf0c      	ite	eq
 8001a6e:	2401      	moveq	r4, #1
 8001a70:	2400      	movne	r4, #0
 8001a72:	42b4      	cmp	r4, r6
 8001a74:	d12d      	bne.n	8001ad2 <UART_WaitOnFlagUntilTimeout+0x7e>
    if (Timeout != HAL_MAX_DELAY)
 8001a76:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001a7a:	d0f3      	beq.n	8001a64 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a7c:	f1b8 0f00 	cmp.w	r8, #0
 8001a80:	d005      	beq.n	8001a8e <UART_WaitOnFlagUntilTimeout+0x3a>
 8001a82:	f7fe fd6b 	bl	800055c <HAL_GetTick>
 8001a86:	eba0 0009 	sub.w	r0, r0, r9
 8001a8a:	4540      	cmp	r0, r8
 8001a8c:	d9ea      	bls.n	8001a64 <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a8e:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a90:	f102 030c 	add.w	r3, r2, #12
 8001a94:	e853 3f00 	ldrex	r3, [r3]
 8001a98:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a9c:	320c      	adds	r2, #12
 8001a9e:	e842 3100 	strex	r1, r3, [r2]
 8001aa2:	2900      	cmp	r1, #0
 8001aa4:	d1f3      	bne.n	8001a8e <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001aa6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001aa8:	f102 0314 	add.w	r3, r2, #20
 8001aac:	e853 3f00 	ldrex	r3, [r3]
 8001ab0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ab4:	3214      	adds	r2, #20
 8001ab6:	e842 3100 	strex	r1, r3, [r2]
 8001aba:	2900      	cmp	r1, #0
 8001abc:	d1f3      	bne.n	8001aa6 <UART_WaitOnFlagUntilTimeout+0x52>
        huart->gState  = HAL_UART_STATE_READY;
 8001abe:	2320      	movs	r3, #32
 8001ac0:	f885 303d 	strb.w	r3, [r5, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001ac4:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
        __HAL_UNLOCK(huart);
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
        return HAL_TIMEOUT;
 8001ace:	2003      	movs	r0, #3
 8001ad0:	e000      	b.n	8001ad4 <UART_WaitOnFlagUntilTimeout+0x80>
  return HAL_OK;
 8001ad2:	2000      	movs	r0, #0
}
 8001ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001ad8 <HAL_UART_Init>:
  if (huart == NULL)
 8001ad8:	b358      	cbz	r0, 8001b32 <HAL_UART_Init+0x5a>
{
 8001ada:	b510      	push	{r4, lr}
 8001adc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001ade:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001ae2:	b30b      	cbz	r3, 8001b28 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001ae4:	2324      	movs	r3, #36	@ 0x24
 8001ae6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UART_DISABLE(huart);
 8001aea:	6822      	ldr	r2, [r4, #0]
 8001aec:	68d3      	ldr	r3, [r2, #12]
 8001aee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001af2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001af4:	4620      	mov	r0, r4
 8001af6:	f7ff ff25 	bl	8001944 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001afa:	6822      	ldr	r2, [r4, #0]
 8001afc:	6913      	ldr	r3, [r2, #16]
 8001afe:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001b02:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b04:	6822      	ldr	r2, [r4, #0]
 8001b06:	6953      	ldr	r3, [r2, #20]
 8001b08:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8001b0c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001b0e:	6822      	ldr	r2, [r4, #0]
 8001b10:	68d3      	ldr	r3, [r2, #12]
 8001b12:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b16:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b18:	2000      	movs	r0, #0
 8001b1a:	6420      	str	r0, [r4, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b1c:	2320      	movs	r3, #32
 8001b1e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b22:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
}
 8001b26:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001b28:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_UART_MspInit(huart);
 8001b2c:	f000 feba 	bl	80028a4 <HAL_UART_MspInit>
 8001b30:	e7d8      	b.n	8001ae4 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001b32:	2001      	movs	r0, #1
}
 8001b34:	4770      	bx	lr

08001b36 <HAL_UART_Transmit>:
{
 8001b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001b3e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b20      	cmp	r3, #32
 8001b46:	d154      	bne.n	8001bf2 <HAL_UART_Transmit+0xbc>
 8001b48:	4604      	mov	r4, r0
 8001b4a:	460d      	mov	r5, r1
 8001b4c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001b4e:	2900      	cmp	r1, #0
 8001b50:	d053      	beq.n	8001bfa <HAL_UART_Transmit+0xc4>
 8001b52:	2a00      	cmp	r2, #0
 8001b54:	d053      	beq.n	8001bfe <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8001b56:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d051      	beq.n	8001c02 <HAL_UART_Transmit+0xcc>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	6403      	str	r3, [r0, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b68:	2321      	movs	r3, #33	@ 0x21
 8001b6a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    tickstart = HAL_GetTick();
 8001b6e:	f7fe fcf5 	bl	800055c <HAL_GetTick>
 8001b72:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001b74:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001b78:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b7c:	68a3      	ldr	r3, [r4, #8]
 8001b7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b82:	d005      	beq.n	8001b90 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 8001b84:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    while (huart->TxXferCount > 0U)
 8001b8e:	e012      	b.n	8001bb6 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b90:	6923      	ldr	r3, [r4, #16]
 8001b92:	b113      	cbz	r3, 8001b9a <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 8001b94:	f04f 0800 	mov.w	r8, #0
 8001b98:	e7f6      	b.n	8001b88 <HAL_UART_Transmit+0x52>
      pdata16bits = (const uint16_t *) pData;
 8001b9a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001b9c:	2500      	movs	r5, #0
 8001b9e:	e7f3      	b.n	8001b88 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ba0:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001ba4:	6822      	ldr	r2, [r4, #0]
 8001ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001baa:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001bac:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8001bae:	b292      	uxth	r2, r2
 8001bb0:	3a01      	subs	r2, #1
 8001bb2:	b292      	uxth	r2, r2
 8001bb4:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001bb6:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	b173      	cbz	r3, 8001bda <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bbc:	9600      	str	r6, [sp, #0]
 8001bbe:	463b      	mov	r3, r7
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2180      	movs	r1, #128	@ 0x80
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	f7ff ff45 	bl	8001a54 <UART_WaitOnFlagUntilTimeout>
 8001bca:	b9e0      	cbnz	r0, 8001c06 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8001bcc:	2d00      	cmp	r5, #0
 8001bce:	d0e7      	beq.n	8001ba0 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bd0:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001bd4:	6823      	ldr	r3, [r4, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001bd8:	e7e8      	b.n	8001bac <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bda:	9600      	str	r6, [sp, #0]
 8001bdc:	463b      	mov	r3, r7
 8001bde:	2200      	movs	r2, #0
 8001be0:	2140      	movs	r1, #64	@ 0x40
 8001be2:	4620      	mov	r0, r4
 8001be4:	f7ff ff36 	bl	8001a54 <UART_WaitOnFlagUntilTimeout>
 8001be8:	b978      	cbnz	r0, 8001c0a <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8001bea:	2320      	movs	r3, #32
 8001bec:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_OK;
 8001bf0:	e000      	b.n	8001bf4 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8001bf2:	2002      	movs	r0, #2
}
 8001bf4:	b002      	add	sp, #8
 8001bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	e7fa      	b.n	8001bf4 <HAL_UART_Transmit+0xbe>
 8001bfe:	2001      	movs	r0, #1
 8001c00:	e7f8      	b.n	8001bf4 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 8001c02:	2002      	movs	r0, #2
 8001c04:	e7f6      	b.n	8001bf4 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 8001c06:	2003      	movs	r0, #3
 8001c08:	e7f4      	b.n	8001bf4 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8001c0a:	2003      	movs	r0, #3
 8001c0c:	e7f2      	b.n	8001bf4 <HAL_UART_Transmit+0xbe>
	...

08001c10 <calcReset>:
uint8_t isFirst (void) {
	return first;
}

void calcReset(void) {
	calc.num1 = 0;
 8001c10:	4b04      	ldr	r3, [pc, #16]	@ (8001c24 <calcReset+0x14>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	605a      	str	r2, [r3, #4]
	calc.num2 = 0;
 8001c16:	609a      	str	r2, [r3, #8]
	calc.operation = '+';
 8001c18:	212b      	movs	r1, #43	@ 0x2b
 8001c1a:	7319      	strb	r1, [r3, #12]
	calc.stage = 0;
 8001c1c:	735a      	strb	r2, [r3, #13]
	calc.layout = 1;
 8001c1e:	2201      	movs	r2, #1
 8001c20:	739a      	strb	r2, [r3, #14]
}
 8001c22:	4770      	bx	lr
 8001c24:	20000008 	.word	0x20000008

08001c28 <printCalc>:

void printCalc(void) {
 8001c28:	b530      	push	{r4, r5, lr}
 8001c2a:	b08b      	sub	sp, #44	@ 0x2c
	char num1[18] = "";
 8001c2c:	2400      	movs	r4, #0
 8001c2e:	9405      	str	r4, [sp, #20]
 8001c30:	9406      	str	r4, [sp, #24]
 8001c32:	9407      	str	r4, [sp, #28]
 8001c34:	9408      	str	r4, [sp, #32]
 8001c36:	f8ad 4024 	strh.w	r4, [sp, #36]	@ 0x24
	char num2[18] = "";
 8001c3a:	9400      	str	r4, [sp, #0]
 8001c3c:	9401      	str	r4, [sp, #4]
 8001c3e:	9402      	str	r4, [sp, #8]
 8001c40:	9403      	str	r4, [sp, #12]
 8001c42:	f8ad 4010 	strh.w	r4, [sp, #16]

	itoa(calc.num1, num1, 10);
 8001c46:	4d18      	ldr	r5, [pc, #96]	@ (8001ca8 <printCalc+0x80>)
 8001c48:	220a      	movs	r2, #10
 8001c4a:	a905      	add	r1, sp, #20
 8001c4c:	6868      	ldr	r0, [r5, #4]
 8001c4e:	f000 fea2 	bl	8002996 <itoa>
	itoa(calc.num2, num2, 10);
 8001c52:	220a      	movs	r2, #10
 8001c54:	4669      	mov	r1, sp
 8001c56:	68a8      	ldr	r0, [r5, #8]
 8001c58:	f000 fe9d 	bl	8002996 <itoa>

	oled_Fill(Black);
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f000 fbf7 	bl	8002450 <oled_Fill>
	oled_SetCursor(0, 0);
 8001c62:	4621      	mov	r1, r4
 8001c64:	4620      	mov	r0, r4
 8001c66:	f000 fd4b 	bl	8002700 <oled_SetCursor>

	oled_WriteString(num1, Font_7x10, White);
 8001c6a:	4c10      	ldr	r4, [pc, #64]	@ (8001cac <printCalc+0x84>)
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001c72:	a805      	add	r0, sp, #20
 8001c74:	f000 fd2c 	bl	80026d0 <oled_WriteString>
	oled_NextLine(Font_7x10);
 8001c78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c7c:	f000 fd50 	bl	8002720 <oled_NextLine>
	oled_WriteChar(calc.operation, Font_7x10, White);
 8001c80:	2301      	movs	r3, #1
 8001c82:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001c86:	7b28      	ldrb	r0, [r5, #12]
 8001c88:	f000 fcb4 	bl	80025f4 <oled_WriteChar>
	oled_NextLine(Font_7x10);
 8001c8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c90:	f000 fd46 	bl	8002720 <oled_NextLine>
	oled_WriteString(num2, Font_7x10, White);
 8001c94:	2301      	movs	r3, #1
 8001c96:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001c9a:	4668      	mov	r0, sp
 8001c9c:	f000 fd18 	bl	80026d0 <oled_WriteString>

	oled_UpdateScreen();
 8001ca0:	f000 fbe6 	bl	8002470 <oled_UpdateScreen>
}
 8001ca4:	b00b      	add	sp, #44	@ 0x2c
 8001ca6:	bd30      	pop	{r4, r5, pc}
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	20000040 	.word	0x20000040

08001cb0 <printRes>:

void printRes(void) {
 8001cb0:	b510      	push	{r4, lr}
 8001cb2:	b086      	sub	sp, #24

	char num1[18] = "";
 8001cb4:	2400      	movs	r4, #0
 8001cb6:	9401      	str	r4, [sp, #4]
 8001cb8:	9402      	str	r4, [sp, #8]
 8001cba:	9403      	str	r4, [sp, #12]
 8001cbc:	9404      	str	r4, [sp, #16]
 8001cbe:	f8ad 4014 	strh.w	r4, [sp, #20]
	itoa(calc.num1, num1, 10);
 8001cc2:	220a      	movs	r2, #10
 8001cc4:	a901      	add	r1, sp, #4
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf8 <printRes+0x48>)
 8001cc8:	6858      	ldr	r0, [r3, #4]
 8001cca:	f000 fe64 	bl	8002996 <itoa>

	oled_Fill(Black);
 8001cce:	4620      	mov	r0, r4
 8001cd0:	f000 fbbe 	bl	8002450 <oled_Fill>
	oled_SetCursor(0, 0);
 8001cd4:	4621      	mov	r1, r4
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	f000 fd12 	bl	8002700 <oled_SetCursor>
	oled_WriteString(num1, Font_7x10, White);
 8001cdc:	4a07      	ldr	r2, [pc, #28]	@ (8001cfc <printRes+0x4c>)
 8001cde:	2301      	movs	r3, #1
 8001ce0:	ca06      	ldmia	r2, {r1, r2}
 8001ce2:	a801      	add	r0, sp, #4
 8001ce4:	f000 fcf4 	bl	80026d0 <oled_WriteString>
	oled_UpdateScreen();
 8001ce8:	f000 fbc2 	bl	8002470 <oled_UpdateScreen>

	HAL_Delay(3000);
 8001cec:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001cf0:	f7fe fc3a 	bl	8000568 <HAL_Delay>
}
 8001cf4:	b006      	add	sp, #24
 8001cf6:	bd10      	pop	{r4, pc}
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	20000040 	.word	0x20000040

08001d00 <getLayout>:

uint8_t getLayout(void) {
	return calc.layout;
}
 8001d00:	4b01      	ldr	r3, [pc, #4]	@ (8001d08 <getLayout+0x8>)
 8001d02:	7b98      	ldrb	r0, [r3, #14]
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	20000008 	.word	0x20000008

08001d0c <pErr>:

void pErr(char* str) {
 8001d0c:	b510      	push	{r4, lr}
 8001d0e:	4604      	mov	r4, r0
	oled_Fill(Black);
 8001d10:	2000      	movs	r0, #0
 8001d12:	f000 fb9d 	bl	8002450 <oled_Fill>
	oled_SetCursor(0, 0);
 8001d16:	2100      	movs	r1, #0
 8001d18:	4608      	mov	r0, r1
 8001d1a:	f000 fcf1 	bl	8002700 <oled_SetCursor>
	oled_WriteString(str, Font_7x10, White);
 8001d1e:	4a06      	ldr	r2, [pc, #24]	@ (8001d38 <pErr+0x2c>)
 8001d20:	2301      	movs	r3, #1
 8001d22:	ca06      	ldmia	r2, {r1, r2}
 8001d24:	4620      	mov	r0, r4
 8001d26:	f000 fcd3 	bl	80026d0 <oled_WriteString>
	oled_UpdateScreen();
 8001d2a:	f000 fba1 	bl	8002470 <oled_UpdateScreen>
	HAL_Delay(1000);
 8001d2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d32:	f7fe fc19 	bl	8000568 <HAL_Delay>
}
 8001d36:	bd10      	pop	{r4, pc}
 8001d38:	20000040 	.word	0x20000040

08001d3c <operation>:

void opErr(void) {
	pErr("Enter first number!");
}

void operation(char ch) {
 8001d3c:	b508      	push	{r3, lr}
	switch(ch) {
 8001d3e:	382a      	subs	r0, #42	@ 0x2a
 8001d40:	2805      	cmp	r0, #5
 8001d42:	d809      	bhi.n	8001d58 <operation+0x1c>
 8001d44:	e8df f000 	tbb	[pc, r0]
 8001d48:	0908030f 	.word	0x0908030f
 8001d4c:	1608      	.short	0x1608
		case '+':
			calc.num1 = calc.num1 + calc.num2;
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <operation+0x50>)
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	6899      	ldr	r1, [r3, #8]
 8001d54:	440a      	add	r2, r1
 8001d56:	605a      	str	r2, [r3, #4]
				calc.num1 = calc.num1 / calc.num2;
			}
			pErr("Dividing by zero is not allowed");
			break;
	}
}
 8001d58:	bd08      	pop	{r3, pc}
			calc.num1 = calc.num1 - calc.num2;
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <operation+0x50>)
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	6899      	ldr	r1, [r3, #8]
 8001d60:	1a52      	subs	r2, r2, r1
 8001d62:	605a      	str	r2, [r3, #4]
			break;
 8001d64:	e7f8      	b.n	8001d58 <operation+0x1c>
			calc.num1 = calc.num1 * calc.num2;
 8001d66:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <operation+0x50>)
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	6899      	ldr	r1, [r3, #8]
 8001d6c:	fb01 f202 	mul.w	r2, r1, r2
 8001d70:	605a      	str	r2, [r3, #4]
			break;
 8001d72:	e7f1      	b.n	8001d58 <operation+0x1c>
			if (calc.num2) {
 8001d74:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <operation+0x50>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	b123      	cbz	r3, 8001d84 <operation+0x48>
				calc.num1 = calc.num1 / calc.num2;
 8001d7a:	4904      	ldr	r1, [pc, #16]	@ (8001d8c <operation+0x50>)
 8001d7c:	684a      	ldr	r2, [r1, #4]
 8001d7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d82:	604a      	str	r2, [r1, #4]
			pErr("Dividing by zero is not allowed");
 8001d84:	4802      	ldr	r0, [pc, #8]	@ (8001d90 <operation+0x54>)
 8001d86:	f7ff ffc1 	bl	8001d0c <pErr>
}
 8001d8a:	e7e5      	b.n	8001d58 <operation+0x1c>
 8001d8c:	20000008 	.word	0x20000008
 8001d90:	080052d0 	.word	0x080052d0

08001d94 <keyPressed>:

void keyPressed(char ch) {
 8001d94:	b538      	push	{r3, r4, r5, lr}
 8001d96:	4604      	mov	r4, r0
	switch (ch) {
 8001d98:	f1a0 0323 	sub.w	r3, r0, #35	@ 0x23
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d847      	bhi.n	8001e30 <keyPressed+0x9c>
 8001da0:	e8df f003 	tbb	[pc, r3]
 8001da4:	4646461c 	.word	0x4646461c
 8001da8:	11464646 	.word	0x11464646
 8001dac:	1b114611 	.word	0x1b114611
 8001db0:	46464611 	.word	0x46464611
 8001db4:	46464646 	.word	0x46464646
 8001db8:	46464646 	.word	0x46464646
 8001dbc:	463b2546 	.word	0x463b2546
 8001dc0:	46464646 	.word	0x46464646
 8001dc4:	38          	.byte	0x38
 8001dc5:	00          	.byte	0x00
	case '+':
	case '-':
	case '*':
	case '/':
		operation(calc.operation);
 8001dc6:	4d25      	ldr	r5, [pc, #148]	@ (8001e5c <keyPressed+0xc8>)
 8001dc8:	7b28      	ldrb	r0, [r5, #12]
 8001dca:	f7ff ffb7 	bl	8001d3c <operation>
		calc.operation = ch;
 8001dce:	732c      	strb	r4, [r5, #12]
		calc.num2 = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60ab      	str	r3, [r5, #8]
		calc.stage = 1;
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	736a      	strb	r2, [r5, #13]
		first = 0;
 8001dd8:	702b      	strb	r3, [r5, #0]
			calc.num1 = calc.num1 * 10 + (ch - '0');
		} else {
			calc.num2 = calc.num2 * 10 + (ch - '0');
		}
	}
}
 8001dda:	bd38      	pop	{r3, r4, r5, pc}
		calc.layout = calc.layout ? 0 : 1;
 8001ddc:	4a1f      	ldr	r2, [pc, #124]	@ (8001e5c <keyPressed+0xc8>)
 8001dde:	7b93      	ldrb	r3, [r2, #14]
 8001de0:	fab3 f383 	clz	r3, r3
 8001de4:	095b      	lsrs	r3, r3, #5
 8001de6:	7393      	strb	r3, [r2, #14]
		first = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	7013      	strb	r3, [r2, #0]
		break;
 8001dec:	e7f5      	b.n	8001dda <keyPressed+0x46>
		if (!calc.stage) {
 8001dee:	4b1b      	ldr	r3, [pc, #108]	@ (8001e5c <keyPressed+0xc8>)
 8001df0:	7b5b      	ldrb	r3, [r3, #13]
 8001df2:	b93b      	cbnz	r3, 8001e04 <keyPressed+0x70>
			calc.num1 = calc.num1 / 10;
 8001df4:	4a19      	ldr	r2, [pc, #100]	@ (8001e5c <keyPressed+0xc8>)
 8001df6:	6853      	ldr	r3, [r2, #4]
 8001df8:	4919      	ldr	r1, [pc, #100]	@ (8001e60 <keyPressed+0xcc>)
 8001dfa:	fba1 1303 	umull	r1, r3, r1, r3
 8001dfe:	08db      	lsrs	r3, r3, #3
 8001e00:	6053      	str	r3, [r2, #4]
 8001e02:	e7ea      	b.n	8001dda <keyPressed+0x46>
			calc.num2 = calc.num2 / 10;
 8001e04:	4a15      	ldr	r2, [pc, #84]	@ (8001e5c <keyPressed+0xc8>)
 8001e06:	6893      	ldr	r3, [r2, #8]
 8001e08:	4915      	ldr	r1, [pc, #84]	@ (8001e60 <keyPressed+0xcc>)
 8001e0a:	fba1 1303 	umull	r1, r3, r1, r3
 8001e0e:	08db      	lsrs	r3, r3, #3
 8001e10:	6093      	str	r3, [r2, #8]
 8001e12:	e7e2      	b.n	8001dda <keyPressed+0x46>
		calcReset();
 8001e14:	f7ff fefc 	bl	8001c10 <calcReset>
		break;
 8001e18:	e7df      	b.n	8001dda <keyPressed+0x46>
		keyPressed(calc.operation);
 8001e1a:	4c10      	ldr	r4, [pc, #64]	@ (8001e5c <keyPressed+0xc8>)
 8001e1c:	7b20      	ldrb	r0, [r4, #12]
 8001e1e:	f7ff ffb9 	bl	8001d94 <keyPressed>
		printRes();
 8001e22:	f7ff ff45 	bl	8001cb0 <printRes>
		calcReset();
 8001e26:	f7ff fef3 	bl	8001c10 <calcReset>
		first = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	7023      	strb	r3, [r4, #0]
		break;
 8001e2e:	e7d4      	b.n	8001dda <keyPressed+0x46>
		if (!calc.stage) {
 8001e30:	4b0a      	ldr	r3, [pc, #40]	@ (8001e5c <keyPressed+0xc8>)
 8001e32:	7b5b      	ldrb	r3, [r3, #13]
 8001e34:	b943      	cbnz	r3, 8001e48 <keyPressed+0xb4>
			calc.num1 = calc.num1 * 10 + (ch - '0');
 8001e36:	4a09      	ldr	r2, [pc, #36]	@ (8001e5c <keyPressed+0xc8>)
 8001e38:	6853      	ldr	r3, [r2, #4]
 8001e3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e3e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001e42:	3b30      	subs	r3, #48	@ 0x30
 8001e44:	6053      	str	r3, [r2, #4]
 8001e46:	e7c8      	b.n	8001dda <keyPressed+0x46>
			calc.num2 = calc.num2 * 10 + (ch - '0');
 8001e48:	4a04      	ldr	r2, [pc, #16]	@ (8001e5c <keyPressed+0xc8>)
 8001e4a:	6893      	ldr	r3, [r2, #8]
 8001e4c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e50:	eb00 0443 	add.w	r4, r0, r3, lsl #1
 8001e54:	3c30      	subs	r4, #48	@ 0x30
 8001e56:	6094      	str	r4, [r2, #8]
}
 8001e58:	e7bf      	b.n	8001dda <keyPressed+0x46>
 8001e5a:	bf00      	nop
 8001e5c:	20000008 	.word	0x20000008
 8001e60:	cccccccd 	.word	0xcccccccd

08001e64 <introSlides>:


void introSlides(void) {
 8001e64:	b510      	push	{r4, lr}
	oled_Fill(Black);
 8001e66:	2000      	movs	r0, #0
 8001e68:	f000 faf2 	bl	8002450 <oled_Fill>
	oled_SetCursor(0, 0);
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4608      	mov	r0, r1
 8001e70:	f000 fc46 	bl	8002700 <oled_SetCursor>
	oled_WriteString("Number layout", Font_7x10, White);
 8001e74:	4c50      	ldr	r4, [pc, #320]	@ (8001fb8 <introSlides+0x154>)
 8001e76:	2301      	movs	r3, #1
 8001e78:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001e7c:	484f      	ldr	r0, [pc, #316]	@ (8001fbc <introSlides+0x158>)
 8001e7e:	f000 fc27 	bl	80026d0 <oled_WriteString>
	oled_NextLine(Font_7x10);
 8001e82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e86:	f000 fc4b 	bl	8002720 <oled_NextLine>
	oled_WriteString("1 2 3", Font_7x10, White);
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001e90:	484b      	ldr	r0, [pc, #300]	@ (8001fc0 <introSlides+0x15c>)
 8001e92:	f000 fc1d 	bl	80026d0 <oled_WriteString>
	oled_NextLine(Font_7x10);
 8001e96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e9a:	f000 fc41 	bl	8002720 <oled_NextLine>
	oled_WriteString("4 5 6", Font_7x10, White);
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001ea4:	4847      	ldr	r0, [pc, #284]	@ (8001fc4 <introSlides+0x160>)
 8001ea6:	f000 fc13 	bl	80026d0 <oled_WriteString>
	oled_NextLine(Font_7x10);
 8001eaa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eae:	f000 fc37 	bl	8002720 <oled_NextLine>
	oled_WriteString("7 8 9", Font_7x10, White);
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001eb8:	4843      	ldr	r0, [pc, #268]	@ (8001fc8 <introSlides+0x164>)
 8001eba:	f000 fc09 	bl	80026d0 <oled_WriteString>
	oled_NextLine(Font_7x10);
 8001ebe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ec2:	f000 fc2d 	bl	8002720 <oled_NextLine>
	oled_WriteString("# 0 =", Font_7x10, White);
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001ecc:	483f      	ldr	r0, [pc, #252]	@ (8001fcc <introSlides+0x168>)
 8001ece:	f000 fbff 	bl	80026d0 <oled_WriteString>
	oled_UpdateScreen();
 8001ed2:	f000 facd 	bl	8002470 <oled_UpdateScreen>
	HAL_Delay(3000);
 8001ed6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001eda:	f7fe fb45 	bl	8000568 <HAL_Delay>

	oled_Fill(Black);
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f000 fab6 	bl	8002450 <oled_Fill>
	oled_SetCursor(0, 0);
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4608      	mov	r0, r1
 8001ee8:	f000 fc0a 	bl	8002700 <oled_SetCursor>
	oled_WriteString("Symbol layout", Font_7x10, White);
 8001eec:	2301      	movs	r3, #1
 8001eee:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001ef2:	4837      	ldr	r0, [pc, #220]	@ (8001fd0 <introSlides+0x16c>)
 8001ef4:	f000 fbec 	bl	80026d0 <oled_WriteString>
	oled_NextLine(Font_7x10);
 8001ef8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001efc:	f000 fc10 	bl	8002720 <oled_NextLine>
	oled_WriteString("+ - .", Font_7x10, White);
 8001f00:	2301      	movs	r3, #1
 8001f02:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001f06:	4833      	ldr	r0, [pc, #204]	@ (8001fd4 <introSlides+0x170>)
 8001f08:	f000 fbe2 	bl	80026d0 <oled_WriteString>
	oled_NextLine(Font_7x10);
 8001f0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f10:	f000 fc06 	bl	8002720 <oled_NextLine>
	oled_WriteString("* / .", Font_7x10, White);
 8001f14:	2301      	movs	r3, #1
 8001f16:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001f1a:	482f      	ldr	r0, [pc, #188]	@ (8001fd8 <introSlides+0x174>)
 8001f1c:	f000 fbd8 	bl	80026d0 <oled_WriteString>
	oled_NextLine(Font_7x10);
 8001f20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f24:	f000 fbfc 	bl	8002720 <oled_NextLine>
	oled_WriteString(". . .", Font_7x10, White);
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001f2e:	482b      	ldr	r0, [pc, #172]	@ (8001fdc <introSlides+0x178>)
 8001f30:	f000 fbce 	bl	80026d0 <oled_WriteString>
	oled_NextLine(Font_7x10);
 8001f34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f38:	f000 fbf2 	bl	8002720 <oled_NextLine>
	oled_WriteString("# < C", Font_7x10, White);
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001f42:	4827      	ldr	r0, [pc, #156]	@ (8001fe0 <introSlides+0x17c>)
 8001f44:	f000 fbc4 	bl	80026d0 <oled_WriteString>
	oled_UpdateScreen();
 8001f48:	f000 fa92 	bl	8002470 <oled_UpdateScreen>
	HAL_Delay(3000);
 8001f4c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001f50:	f7fe fb0a 	bl	8000568 <HAL_Delay>

	oled_Fill(Black);
 8001f54:	2000      	movs	r0, #0
 8001f56:	f000 fa7b 	bl	8002450 <oled_Fill>
	oled_SetCursor(0, 0);
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4608      	mov	r0, r1
 8001f5e:	f000 fbcf 	bl	8002700 <oled_SetCursor>
	oled_WriteString("# - Change layout", Font_7x10, White);
 8001f62:	2301      	movs	r3, #1
 8001f64:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001f68:	481e      	ldr	r0, [pc, #120]	@ (8001fe4 <introSlides+0x180>)
 8001f6a:	f000 fbb1 	bl	80026d0 <oled_WriteString>
	oled_NextLine(Font_7x10);
 8001f6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f72:	f000 fbd5 	bl	8002720 <oled_NextLine>
	oled_WriteString("< - Delete", Font_7x10, White);
 8001f76:	2301      	movs	r3, #1
 8001f78:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001f7c:	481a      	ldr	r0, [pc, #104]	@ (8001fe8 <introSlides+0x184>)
 8001f7e:	f000 fba7 	bl	80026d0 <oled_WriteString>
	oled_NextLine(Font_7x10);
 8001f82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f86:	f000 fbcb 	bl	8002720 <oled_NextLine>
	oled_WriteString("C - Reset", Font_7x10, White);
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001f90:	4816      	ldr	r0, [pc, #88]	@ (8001fec <introSlides+0x188>)
 8001f92:	f000 fb9d 	bl	80026d0 <oled_WriteString>
	oled_NextLine(Font_7x10);
 8001f96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f9a:	f000 fbc1 	bl	8002720 <oled_NextLine>
	oled_WriteString(". - No operation", Font_7x10, White);
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001fa4:	4812      	ldr	r0, [pc, #72]	@ (8001ff0 <introSlides+0x18c>)
 8001fa6:	f000 fb93 	bl	80026d0 <oled_WriteString>
	oled_UpdateScreen();
 8001faa:	f000 fa61 	bl	8002470 <oled_UpdateScreen>
	HAL_Delay(3000);
 8001fae:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001fb2:	f7fe fad9 	bl	8000568 <HAL_Delay>
}
 8001fb6:	bd10      	pop	{r4, pc}
 8001fb8:	20000040 	.word	0x20000040
 8001fbc:	080052f0 	.word	0x080052f0
 8001fc0:	08005300 	.word	0x08005300
 8001fc4:	08005308 	.word	0x08005308
 8001fc8:	08005310 	.word	0x08005310
 8001fcc:	08005318 	.word	0x08005318
 8001fd0:	08005320 	.word	0x08005320
 8001fd4:	08005330 	.word	0x08005330
 8001fd8:	08005338 	.word	0x08005338
 8001fdc:	08005340 	.word	0x08005340
 8001fe0:	08005348 	.word	0x08005348
 8001fe4:	08005350 	.word	0x08005350
 8001fe8:	08005364 	.word	0x08005364
 8001fec:	08005370 	.word	0x08005370
 8001ff0:	0800537c 	.word	0x0800537c

08001ff4 <getKey>:
		{'*', '/', '.'},
		{'.', '.', '.'},
		{'#', '<', 'C'}
};

char getKey(void) {
 8001ff4:	b510      	push	{r4, lr}
 8001ff6:	b082      	sub	sp, #8
	uint8_t key;
	uint8_t Row[4] = {ROW1, ROW2, ROW3, ROW4};
 8001ff8:	4b20      	ldr	r3, [pc, #128]	@ (800207c <getKey+0x88>)
 8001ffa:	9301      	str	r3, [sp, #4]
	while (1) {
		for (int i = 0; i < 4; i++) {
 8001ffc:	2400      	movs	r4, #0
 8001ffe:	2c03      	cmp	r4, #3
 8002000:	dcfc      	bgt.n	8001ffc <getKey+0x8>
			key = Check_Row(Row[i]);
 8002002:	f104 0308 	add.w	r3, r4, #8
 8002006:	446b      	add	r3, sp
 8002008:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 800200c:	f000 f90e 	bl	800222c <Check_Row>
			if (key == 0x01) {
 8002010:	2801      	cmp	r0, #1
 8002012:	d005      	beq.n	8002020 <getKey+0x2c>
				return getLayout() ? layoutNum[i][2] : layoutSym[i][2];
			}
			if (key == 0x02) {
 8002014:	2802      	cmp	r0, #2
 8002016:	d013      	beq.n	8002040 <getKey+0x4c>
				return getLayout() ? layoutNum[i][1] : layoutSym[i][1];
			}
			if (key == 0x04) {
 8002018:	2804      	cmp	r0, #4
 800201a:	d020      	beq.n	800205e <getKey+0x6a>
		for (int i = 0; i < 4; i++) {
 800201c:	3401      	adds	r4, #1
 800201e:	e7ee      	b.n	8001ffe <getKey+0xa>
				return getLayout() ? layoutNum[i][2] : layoutSym[i][2];
 8002020:	f7ff fe6e 	bl	8001d00 <getLayout>
 8002024:	b130      	cbz	r0, 8002034 <getKey+0x40>
 8002026:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800202a:	4b15      	ldr	r3, [pc, #84]	@ (8002080 <getKey+0x8c>)
 800202c:	4423      	add	r3, r4
 800202e:	7898      	ldrb	r0, [r3, #2]
				return getLayout() ? layoutNum[i][0] : layoutSym[i][0];
			}
		}
	}
}
 8002030:	b002      	add	sp, #8
 8002032:	bd10      	pop	{r4, pc}
				return getLayout() ? layoutNum[i][2] : layoutSym[i][2];
 8002034:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8002038:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <getKey+0x8c>)
 800203a:	4423      	add	r3, r4
 800203c:	7b98      	ldrb	r0, [r3, #14]
 800203e:	e7f7      	b.n	8002030 <getKey+0x3c>
				return getLayout() ? layoutNum[i][1] : layoutSym[i][1];
 8002040:	f7ff fe5e 	bl	8001d00 <getLayout>
 8002044:	b128      	cbz	r0, 8002052 <getKey+0x5e>
 8002046:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800204a:	4b0d      	ldr	r3, [pc, #52]	@ (8002080 <getKey+0x8c>)
 800204c:	4423      	add	r3, r4
 800204e:	7858      	ldrb	r0, [r3, #1]
 8002050:	e7ee      	b.n	8002030 <getKey+0x3c>
 8002052:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8002056:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <getKey+0x8c>)
 8002058:	4423      	add	r3, r4
 800205a:	7b58      	ldrb	r0, [r3, #13]
 800205c:	e7e8      	b.n	8002030 <getKey+0x3c>
				return getLayout() ? layoutNum[i][0] : layoutSym[i][0];
 800205e:	f7ff fe4f 	bl	8001d00 <getLayout>
 8002062:	b120      	cbz	r0, 800206e <getKey+0x7a>
 8002064:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8002068:	4b05      	ldr	r3, [pc, #20]	@ (8002080 <getKey+0x8c>)
 800206a:	5d18      	ldrb	r0, [r3, r4]
 800206c:	e7e0      	b.n	8002030 <getKey+0x3c>
 800206e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8002072:	4b03      	ldr	r3, [pc, #12]	@ (8002080 <getKey+0x8c>)
 8002074:	4423      	add	r3, r4
 8002076:	7b18      	ldrb	r0, [r3, #12]
 8002078:	e7da      	b.n	8002030 <getKey+0x3c>
 800207a:	bf00      	nop
 800207c:	f7fbfdfe 	.word	0xf7fbfdfe
 8002080:	20000018 	.word	0x20000018

08002084 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002084:	b530      	push	{r4, r5, lr}
 8002086:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	2400      	movs	r4, #0
 800208a:	9405      	str	r4, [sp, #20]
 800208c:	9406      	str	r4, [sp, #24]
 800208e:	9407      	str	r4, [sp, #28]
 8002090:	9408      	str	r4, [sp, #32]
 8002092:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002094:	9400      	str	r4, [sp, #0]
 8002096:	4b23      	ldr	r3, [pc, #140]	@ (8002124 <MX_GPIO_Init+0xa0>)
 8002098:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800209a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800209e:	631a      	str	r2, [r3, #48]	@ 0x30
 80020a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020a2:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80020a6:	9200      	str	r2, [sp, #0]
 80020a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020aa:	9401      	str	r4, [sp, #4]
 80020ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020ae:	f042 0208 	orr.w	r2, r2, #8
 80020b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80020b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020b6:	f002 0208 	and.w	r2, r2, #8
 80020ba:	9201      	str	r2, [sp, #4]
 80020bc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020be:	9402      	str	r4, [sp, #8]
 80020c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020c2:	f042 0204 	orr.w	r2, r2, #4
 80020c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80020c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020ca:	f002 0204 	and.w	r2, r2, #4
 80020ce:	9202      	str	r2, [sp, #8]
 80020d0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d2:	9403      	str	r4, [sp, #12]
 80020d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	631a      	str	r2, [r3, #48]	@ 0x30
 80020dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020de:	f002 0201 	and.w	r2, r2, #1
 80020e2:	9203      	str	r2, [sp, #12]
 80020e4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e6:	9404      	str	r4, [sp, #16]
 80020e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020ea:	f042 0202 	orr.w	r2, r2, #2
 80020ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	9304      	str	r3, [sp, #16]
 80020f8:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80020fa:	4d0b      	ldr	r5, [pc, #44]	@ (8002128 <MX_GPIO_Init+0xa4>)
 80020fc:	4622      	mov	r2, r4
 80020fe:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8002102:	4628      	mov	r0, r5
 8002104:	f7fe fba4 	bl	8000850 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002108:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800210c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210e:	2301      	movs	r3, #1
 8002110:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002114:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002116:	a905      	add	r1, sp, #20
 8002118:	4628      	mov	r0, r5
 800211a:	f7fe faa3 	bl	8000664 <HAL_GPIO_Init>

}
 800211e:	b00b      	add	sp, #44	@ 0x2c
 8002120:	bd30      	pop	{r4, r5, pc}
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800
 8002128:	40020c00 	.word	0x40020c00

0800212c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800212c:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800212e:	480b      	ldr	r0, [pc, #44]	@ (800215c <MX_I2C1_Init+0x30>)
 8002130:	4b0b      	ldr	r3, [pc, #44]	@ (8002160 <MX_I2C1_Init+0x34>)
 8002132:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002134:	4b0b      	ldr	r3, [pc, #44]	@ (8002164 <MX_I2C1_Init+0x38>)
 8002136:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002138:	2300      	movs	r3, #0
 800213a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800213c:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800213e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002142:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002144:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002146:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002148:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800214a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800214c:	f7fe fdd2 	bl	8000cf4 <HAL_I2C_Init>
 8002150:	b900      	cbnz	r0, 8002154 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002152:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002154:	f000 f964 	bl	8002420 <Error_Handler>
}
 8002158:	e7fb      	b.n	8002152 <MX_I2C1_Init+0x26>
 800215a:	bf00      	nop
 800215c:	20000070 	.word	0x20000070
 8002160:	40005400 	.word	0x40005400
 8002164:	000186a0 	.word	0x000186a0

08002168 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002168:	b530      	push	{r4, r5, lr}
 800216a:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	2300      	movs	r3, #0
 800216e:	9303      	str	r3, [sp, #12]
 8002170:	9304      	str	r3, [sp, #16]
 8002172:	9305      	str	r3, [sp, #20]
 8002174:	9306      	str	r3, [sp, #24]
 8002176:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8002178:	6802      	ldr	r2, [r0, #0]
 800217a:	4b15      	ldr	r3, [pc, #84]	@ (80021d0 <HAL_I2C_MspInit+0x68>)
 800217c:	429a      	cmp	r2, r3
 800217e:	d001      	beq.n	8002184 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002180:	b009      	add	sp, #36	@ 0x24
 8002182:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002184:	2500      	movs	r5, #0
 8002186:	9501      	str	r5, [sp, #4]
 8002188:	4c12      	ldr	r4, [pc, #72]	@ (80021d4 <HAL_I2C_MspInit+0x6c>)
 800218a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800218c:	f043 0302 	orr.w	r3, r3, #2
 8002190:	6323      	str	r3, [r4, #48]	@ 0x30
 8002192:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	9301      	str	r3, [sp, #4]
 800219a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800219c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80021a0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021a2:	2312      	movs	r3, #18
 80021a4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021a6:	2301      	movs	r3, #1
 80021a8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021aa:	2303      	movs	r3, #3
 80021ac:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021ae:	2304      	movs	r3, #4
 80021b0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b2:	a903      	add	r1, sp, #12
 80021b4:	4808      	ldr	r0, [pc, #32]	@ (80021d8 <HAL_I2C_MspInit+0x70>)
 80021b6:	f7fe fa55 	bl	8000664 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021ba:	9502      	str	r5, [sp, #8]
 80021bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80021be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021c2:	6423      	str	r3, [r4, #64]	@ 0x40
 80021c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80021c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ca:	9302      	str	r3, [sp, #8]
 80021cc:	9b02      	ldr	r3, [sp, #8]
}
 80021ce:	e7d7      	b.n	8002180 <HAL_I2C_MspInit+0x18>
 80021d0:	40005400 	.word	0x40005400
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40020400 	.word	0x40020400

080021dc <Set_Keyboard>:
#include "sdk_uart.h"
#include "usart.h"

#define KBRD_ADDR 0xE2

HAL_StatusTypeDef Set_Keyboard( void ) {
 80021dc:	b510      	push	{r4, lr}
 80021de:	b082      	sub	sp, #8
	HAL_StatusTypeDef ret = HAL_OK;
	uint8_t buf;

	buf = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f88d 3007 	strb.w	r3, [sp, #7]
	ret = PCA9538_Write_Register(KBRD_ADDR, POLARITY_INVERSION, &buf);
 80021e6:	f10d 0207 	add.w	r2, sp, #7
 80021ea:	2102      	movs	r1, #2
 80021ec:	20e2      	movs	r0, #226	@ 0xe2
 80021ee:	f000 fac9 	bl	8002784 <PCA9538_Write_Register>
	if( ret != HAL_OK ) {
 80021f2:	b968      	cbnz	r0, 8002210 <Set_Keyboard+0x34>
		UART_Transmit((uint8_t*)"Error write polarity\n");
		goto exit;
	}

	buf = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f88d 3007 	strb.w	r3, [sp, #7]
	ret = PCA9538_Write_Register(KBRD_ADDR, OUTPUT_PORT, &buf);
 80021fa:	f10d 0207 	add.w	r2, sp, #7
 80021fe:	2101      	movs	r1, #1
 8002200:	20e2      	movs	r0, #226	@ 0xe2
 8002202:	f000 fabf 	bl	8002784 <PCA9538_Write_Register>
	if( ret != HAL_OK ) {
 8002206:	4604      	mov	r4, r0
 8002208:	b938      	cbnz	r0, 800221a <Set_Keyboard+0x3e>
		UART_Transmit((uint8_t*)"Error write output\n");
	}

exit:
	return ret;
}
 800220a:	4620      	mov	r0, r4
 800220c:	b002      	add	sp, #8
 800220e:	bd10      	pop	{r4, pc}
 8002210:	4604      	mov	r4, r0
		UART_Transmit((uint8_t*)"Error write polarity\n");
 8002212:	4804      	ldr	r0, [pc, #16]	@ (8002224 <Set_Keyboard+0x48>)
 8002214:	f000 fad0 	bl	80027b8 <UART_Transmit>
		goto exit;
 8002218:	e7f7      	b.n	800220a <Set_Keyboard+0x2e>
		UART_Transmit((uint8_t*)"Error write output\n");
 800221a:	4803      	ldr	r0, [pc, #12]	@ (8002228 <Set_Keyboard+0x4c>)
 800221c:	f000 facc 	bl	80027b8 <UART_Transmit>
 8002220:	e7f3      	b.n	800220a <Set_Keyboard+0x2e>
 8002222:	bf00      	nop
 8002224:	08005390 	.word	0x08005390
 8002228:	080053a8 	.word	0x080053a8

0800222c <Check_Row>:

uint8_t Check_Row( uint8_t  Nrow ) {
 800222c:	b510      	push	{r4, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	4604      	mov	r4, r0
	uint8_t Nkey = 0x00;
	HAL_StatusTypeDef ret = HAL_OK;
	uint8_t buf;
	uint8_t kbd_in;

	ret = Set_Keyboard();
 8002232:	f7ff ffd3 	bl	80021dc <Set_Keyboard>
	if( ret != HAL_OK ) {
 8002236:	bb08      	cbnz	r0, 800227c <Check_Row+0x50>
		UART_Transmit((uint8_t*)"Error write init\n");
	}

	buf = Nrow;
 8002238:	f88d 4007 	strb.w	r4, [sp, #7]
	ret = PCA9538_Write_Register(KBRD_ADDR, CONFIG, &buf);
 800223c:	f10d 0207 	add.w	r2, sp, #7
 8002240:	2103      	movs	r1, #3
 8002242:	20e2      	movs	r0, #226	@ 0xe2
 8002244:	f000 fa9e 	bl	8002784 <PCA9538_Write_Register>
	if( ret != HAL_OK ) {
 8002248:	b9e0      	cbnz	r0, 8002284 <Check_Row+0x58>
		UART_Transmit((uint8_t*)"Error write config\n");
	}

	ret = PCA9538_Read_Inputs(KBRD_ADDR, &buf);
 800224a:	f10d 0107 	add.w	r1, sp, #7
 800224e:	20e2      	movs	r0, #226	@ 0xe2
 8002250:	f000 faac 	bl	80027ac <PCA9538_Read_Inputs>
	if( ret != HAL_OK ) {
 8002254:	b9d0      	cbnz	r0, 800228c <Check_Row+0x60>
		UART_Transmit((uint8_t*)"Read error\n");
	}

	kbd_in = buf & 0x70;
 8002256:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800225a:	f003 0070 	and.w	r0, r3, #112	@ 0x70
	Nkey = kbd_in;
	if( kbd_in != 0x70) {
 800225e:	2870      	cmp	r0, #112	@ 0x70
 8002260:	d033      	beq.n	80022ca <Check_Row+0x9e>
		if( !(kbd_in & 0x10) ) {
 8002262:	f013 0f10 	tst.w	r3, #16
 8002266:	d116      	bne.n	8002296 <Check_Row+0x6a>
			switch (Nrow) {
 8002268:	f1a4 02f7 	sub.w	r2, r4, #247	@ 0xf7
 800226c:	2a07      	cmp	r2, #7
 800226e:	d812      	bhi.n	8002296 <Check_Row+0x6a>
 8002270:	e8df f002 	tbb	[pc, r2]
 8002274:	11111110 	.word	0x11111110
 8002278:	10101110 	.word	0x10101110
		UART_Transmit((uint8_t*)"Error write init\n");
 800227c:	4815      	ldr	r0, [pc, #84]	@ (80022d4 <Check_Row+0xa8>)
 800227e:	f000 fa9b 	bl	80027b8 <UART_Transmit>
 8002282:	e7d9      	b.n	8002238 <Check_Row+0xc>
		UART_Transmit((uint8_t*)"Error write config\n");
 8002284:	4814      	ldr	r0, [pc, #80]	@ (80022d8 <Check_Row+0xac>)
 8002286:	f000 fa97 	bl	80027b8 <UART_Transmit>
 800228a:	e7de      	b.n	800224a <Check_Row+0x1e>
		UART_Transmit((uint8_t*)"Read error\n");
 800228c:	4813      	ldr	r0, [pc, #76]	@ (80022dc <Check_Row+0xb0>)
 800228e:	f000 fa93 	bl	80027b8 <UART_Transmit>
 8002292:	e7e0      	b.n	8002256 <Check_Row+0x2a>
				case ROW1:
					Nkey = 0x04;
 8002294:	2004      	movs	r0, #4
				case ROW4:
					Nkey = 0x04;
					break;
			}
		}
		if( !(kbd_in & 0x20) ) {
 8002296:	f013 0f20 	tst.w	r3, #32
 800229a:	d10a      	bne.n	80022b2 <Check_Row+0x86>
			switch (Nrow) {
 800229c:	f1a4 02f7 	sub.w	r2, r4, #247	@ 0xf7
 80022a0:	2a07      	cmp	r2, #7
 80022a2:	d806      	bhi.n	80022b2 <Check_Row+0x86>
 80022a4:	e8df f002 	tbb	[pc, r2]
 80022a8:	05050504 	.word	0x05050504
 80022ac:	04040504 	.word	0x04040504
				case ROW1:
					Nkey = 0x02;
 80022b0:	2002      	movs	r0, #2
				case ROW4:
					Nkey = 0x02;
					break;
			}
		}
		if( !(kbd_in & 0x40) ) {
 80022b2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80022b6:	d109      	bne.n	80022cc <Check_Row+0xa0>
			switch (Nrow) {
 80022b8:	3cf7      	subs	r4, #247	@ 0xf7
 80022ba:	2c07      	cmp	r4, #7
 80022bc:	d806      	bhi.n	80022cc <Check_Row+0xa0>
 80022be:	e8df f004 	tbb	[pc, r4]
 80022c2:	0507      	.short	0x0507
 80022c4:	05070505 	.word	0x05070505
 80022c8:	0707      	.short	0x0707
					Nkey = 0x01;
					break;
			}
		}
	}
	else Nkey = 0x00;
 80022ca:	2000      	movs	r0, #0

	return Nkey;
}
 80022cc:	b002      	add	sp, #8
 80022ce:	bd10      	pop	{r4, pc}
					Nkey = 0x01;
 80022d0:	2001      	movs	r0, #1
 80022d2:	e7fb      	b.n	80022cc <Check_Row+0xa0>
 80022d4:	080053bc 	.word	0x080053bc
 80022d8:	080053d0 	.word	0x080053d0
 80022dc:	080053e4 	.word	0x080053e4

080022e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022e0:	b530      	push	{r4, r5, lr}
 80022e2:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022e4:	2230      	movs	r2, #48	@ 0x30
 80022e6:	2100      	movs	r1, #0
 80022e8:	a808      	add	r0, sp, #32
 80022ea:	f000 fb99 	bl	8002a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022ee:	2400      	movs	r4, #0
 80022f0:	9403      	str	r4, [sp, #12]
 80022f2:	9404      	str	r4, [sp, #16]
 80022f4:	9405      	str	r4, [sp, #20]
 80022f6:	9406      	str	r4, [sp, #24]
 80022f8:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022fa:	9401      	str	r4, [sp, #4]
 80022fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002370 <SystemClock_Config+0x90>)
 80022fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002300:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002304:	641a      	str	r2, [r3, #64]	@ 0x40
 8002306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002310:	9402      	str	r4, [sp, #8]
 8002312:	4b18      	ldr	r3, [pc, #96]	@ (8002374 <SystemClock_Config+0x94>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002322:	9302      	str	r3, [sp, #8]
 8002324:	9b02      	ldr	r3, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002326:	2301      	movs	r3, #1
 8002328:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800232a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800232e:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002330:	2502      	movs	r5, #2
 8002332:	950e      	str	r5, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002334:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002338:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800233a:	2319      	movs	r3, #25
 800233c:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800233e:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002342:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002344:	9512      	str	r5, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002346:	2304      	movs	r3, #4
 8002348:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800234a:	a808      	add	r0, sp, #32
 800234c:	f7fe ffd4 	bl	80012f8 <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002350:	230f      	movs	r3, #15
 8002352:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002354:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002356:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002358:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800235c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800235e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002362:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002364:	2105      	movs	r1, #5
 8002366:	a803      	add	r0, sp, #12
 8002368:	f7ff fa16 	bl	8001798 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800236c:	b015      	add	sp, #84	@ 0x54
 800236e:	bd30      	pop	{r4, r5, pc}
 8002370:	40023800 	.word	0x40023800
 8002374:	40007000 	.word	0x40007000

08002378 <main>:
{
 8002378:	b510      	push	{r4, lr}
  HAL_Init();
 800237a:	f7fe f8c9 	bl	8000510 <HAL_Init>
  SystemClock_Config();
 800237e:	f7ff ffaf 	bl	80022e0 <SystemClock_Config>
  MX_GPIO_Init();
 8002382:	f7ff fe7f 	bl	8002084 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002386:	f7ff fed1 	bl	800212c <MX_I2C1_Init>
  MX_USART6_UART_Init();
 800238a:	f000 fa71 	bl	8002870 <MX_USART6_UART_Init>
  oled_Init();
 800238e:	f000 f897 	bl	80024c0 <oled_Init>
  oled_Fill(White);
 8002392:	2001      	movs	r0, #1
 8002394:	f000 f85c 	bl	8002450 <oled_Fill>
  oled_WriteString("usopshiy", Font_7x10, Black);
 8002398:	4c1c      	ldr	r4, [pc, #112]	@ (800240c <main+0x94>)
 800239a:	2300      	movs	r3, #0
 800239c:	e894 0006 	ldmia.w	r4, {r1, r2}
 80023a0:	481b      	ldr	r0, [pc, #108]	@ (8002410 <main+0x98>)
 80023a2:	f000 f995 	bl	80026d0 <oled_WriteString>
  oled_NextLine(Font_7x10);
 80023a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023aa:	f000 f9b9 	bl	8002720 <oled_NextLine>
  oled_WriteString("DiedCloud", Font_7x10, Black);
 80023ae:	2300      	movs	r3, #0
 80023b0:	e894 0006 	ldmia.w	r4, {r1, r2}
 80023b4:	4817      	ldr	r0, [pc, #92]	@ (8002414 <main+0x9c>)
 80023b6:	f000 f98b 	bl	80026d0 <oled_WriteString>
  oled_NextLine(Font_7x10);
 80023ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023be:	f000 f9af 	bl	8002720 <oled_NextLine>
  oled_WriteString("uvusibuneka", Font_7x10, Black);
 80023c2:	2300      	movs	r3, #0
 80023c4:	e894 0006 	ldmia.w	r4, {r1, r2}
 80023c8:	4813      	ldr	r0, [pc, #76]	@ (8002418 <main+0xa0>)
 80023ca:	f000 f981 	bl	80026d0 <oled_WriteString>
  oled_NextLine(Font_7x10);
 80023ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023d2:	f000 f9a5 	bl	8002720 <oled_NextLine>
  oled_WriteString("korean_boy", Font_7x10, Black);
 80023d6:	2300      	movs	r3, #0
 80023d8:	e894 0006 	ldmia.w	r4, {r1, r2}
 80023dc:	480f      	ldr	r0, [pc, #60]	@ (800241c <main+0xa4>)
 80023de:	f000 f977 	bl	80026d0 <oled_WriteString>
  oled_UpdateScreen();
 80023e2:	f000 f845 	bl	8002470 <oled_UpdateScreen>
  HAL_Delay(5000);
 80023e6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80023ea:	f7fe f8bd 	bl	8000568 <HAL_Delay>
  introSlides();
 80023ee:	f7ff fd39 	bl	8001e64 <introSlides>
	  printCalc();
 80023f2:	f7ff fc19 	bl	8001c28 <printCalc>
	  char check = getKey();
 80023f6:	f7ff fdfd 	bl	8001ff4 <getKey>
	  keyPressed(check);
 80023fa:	f7ff fccb 	bl	8001d94 <keyPressed>
	  printCalc();
 80023fe:	f7ff fc13 	bl	8001c28 <printCalc>
	  HAL_Delay(50);
 8002402:	2032      	movs	r0, #50	@ 0x32
 8002404:	f7fe f8b0 	bl	8000568 <HAL_Delay>
  while (1)
 8002408:	e7f3      	b.n	80023f2 <main+0x7a>
 800240a:	bf00      	nop
 800240c:	20000040 	.word	0x20000040
 8002410:	080053f0 	.word	0x080053f0
 8002414:	080053fc 	.word	0x080053fc
 8002418:	08005408 	.word	0x08005408
 800241c:	08005414 	.word	0x08005414

08002420 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002420:	4770      	bx	lr
	...

08002424 <oled_WriteCommand>:
static uint8_t OLED_Buffer[1024];

static OLED_t OLED;


static void oled_WriteCommand(uint8_t command) {
 8002424:	b500      	push	{lr}
 8002426:	b087      	sub	sp, #28
 8002428:	f88d 0017 	strb.w	r0, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x00,1,&command,1,10);
 800242c:	230a      	movs	r3, #10
 800242e:	9302      	str	r3, [sp, #8]
 8002430:	2301      	movs	r3, #1
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	f10d 0217 	add.w	r2, sp, #23
 8002438:	9200      	str	r2, [sp, #0]
 800243a:	2200      	movs	r2, #0
 800243c:	2178      	movs	r1, #120	@ 0x78
 800243e:	4803      	ldr	r0, [pc, #12]	@ (800244c <oled_WriteCommand+0x28>)
 8002440:	f7fe fd36 	bl	8000eb0 <HAL_I2C_Mem_Write>
}
 8002444:	b007      	add	sp, #28
 8002446:	f85d fb04 	ldr.w	pc, [sp], #4
 800244a:	bf00      	nop
 800244c:	20000070 	.word	0x20000070

08002450 <oled_Fill>:
}

void oled_Fill(OLED_COLOR color) {
	uint32_t i;

	for(i = 0; i < sizeof(OLED_Buffer); i++) {
 8002450:	2300      	movs	r3, #0
 8002452:	e003      	b.n	800245c <oled_Fill+0xc>
		OLED_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002454:	21ff      	movs	r1, #255	@ 0xff
 8002456:	4a05      	ldr	r2, [pc, #20]	@ (800246c <oled_Fill+0x1c>)
 8002458:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < sizeof(OLED_Buffer); i++) {
 800245a:	3301      	adds	r3, #1
 800245c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002460:	d203      	bcs.n	800246a <oled_Fill+0x1a>
		OLED_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002462:	2800      	cmp	r0, #0
 8002464:	d1f6      	bne.n	8002454 <oled_Fill+0x4>
 8002466:	4601      	mov	r1, r0
 8002468:	e7f5      	b.n	8002456 <oled_Fill+0x6>
	}
}
 800246a:	4770      	bx	lr
 800246c:	200000c8 	.word	0x200000c8

08002470 <oled_UpdateScreen>:


void oled_UpdateScreen(void) {
 8002470:	b510      	push	{r4, lr}
 8002472:	b084      	sub	sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8002474:	2400      	movs	r4, #0
 8002476:	e01a      	b.n	80024ae <oled_UpdateScreen+0x3e>
		oled_WriteCommand(0xB0 + i);
 8002478:	f1a4 0050 	sub.w	r0, r4, #80	@ 0x50
 800247c:	b2c0      	uxtb	r0, r0
 800247e:	f7ff ffd1 	bl	8002424 <oled_WriteCommand>
		oled_WriteCommand(0x00);
 8002482:	2000      	movs	r0, #0
 8002484:	f7ff ffce 	bl	8002424 <oled_WriteCommand>
		oled_WriteCommand(0x10);
 8002488:	2010      	movs	r0, #16
 800248a:	f7ff ffcb 	bl	8002424 <oled_WriteCommand>

		HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x40,1,&OLED_Buffer[OLED_WIDTH * i],OLED_WIDTH,100);
 800248e:	2364      	movs	r3, #100	@ 0x64
 8002490:	9302      	str	r3, [sp, #8]
 8002492:	2380      	movs	r3, #128	@ 0x80
 8002494:	9301      	str	r3, [sp, #4]
 8002496:	4b08      	ldr	r3, [pc, #32]	@ (80024b8 <oled_UpdateScreen+0x48>)
 8002498:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	2301      	movs	r3, #1
 80024a0:	2240      	movs	r2, #64	@ 0x40
 80024a2:	2178      	movs	r1, #120	@ 0x78
 80024a4:	4805      	ldr	r0, [pc, #20]	@ (80024bc <oled_UpdateScreen+0x4c>)
 80024a6:	f7fe fd03 	bl	8000eb0 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80024aa:	3401      	adds	r4, #1
 80024ac:	b2e4      	uxtb	r4, r4
 80024ae:	2c07      	cmp	r4, #7
 80024b0:	d9e2      	bls.n	8002478 <oled_UpdateScreen+0x8>
	}
}
 80024b2:	b004      	add	sp, #16
 80024b4:	bd10      	pop	{r4, pc}
 80024b6:	bf00      	nop
 80024b8:	200000c8 	.word	0x200000c8
 80024bc:	20000070 	.word	0x20000070

080024c0 <oled_Init>:
uint8_t oled_Init(void) {
 80024c0:	b508      	push	{r3, lr}
	HAL_Delay(100);
 80024c2:	2064      	movs	r0, #100	@ 0x64
 80024c4:	f7fe f850 	bl	8000568 <HAL_Delay>
	oled_WriteCommand(0xAE);
 80024c8:	20ae      	movs	r0, #174	@ 0xae
 80024ca:	f7ff ffab 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0x20);
 80024ce:	2020      	movs	r0, #32
 80024d0:	f7ff ffa8 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0x10);
 80024d4:	2010      	movs	r0, #16
 80024d6:	f7ff ffa5 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0xB0);
 80024da:	20b0      	movs	r0, #176	@ 0xb0
 80024dc:	f7ff ffa2 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0xC8);
 80024e0:	20c8      	movs	r0, #200	@ 0xc8
 80024e2:	f7ff ff9f 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0x00);
 80024e6:	2000      	movs	r0, #0
 80024e8:	f7ff ff9c 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0x10);
 80024ec:	2010      	movs	r0, #16
 80024ee:	f7ff ff99 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0x40);
 80024f2:	2040      	movs	r0, #64	@ 0x40
 80024f4:	f7ff ff96 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0x81);
 80024f8:	2081      	movs	r0, #129	@ 0x81
 80024fa:	f7ff ff93 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0xFF);
 80024fe:	20ff      	movs	r0, #255	@ 0xff
 8002500:	f7ff ff90 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0xA1);
 8002504:	20a1      	movs	r0, #161	@ 0xa1
 8002506:	f7ff ff8d 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0xA6);
 800250a:	20a6      	movs	r0, #166	@ 0xa6
 800250c:	f7ff ff8a 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0xA8);
 8002510:	20a8      	movs	r0, #168	@ 0xa8
 8002512:	f7ff ff87 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0x3F);
 8002516:	203f      	movs	r0, #63	@ 0x3f
 8002518:	f7ff ff84 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0xA4);
 800251c:	20a4      	movs	r0, #164	@ 0xa4
 800251e:	f7ff ff81 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0xD3);
 8002522:	20d3      	movs	r0, #211	@ 0xd3
 8002524:	f7ff ff7e 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0x00);
 8002528:	2000      	movs	r0, #0
 800252a:	f7ff ff7b 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0xD5);
 800252e:	20d5      	movs	r0, #213	@ 0xd5
 8002530:	f7ff ff78 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0xF0);
 8002534:	20f0      	movs	r0, #240	@ 0xf0
 8002536:	f7ff ff75 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0xD9);
 800253a:	20d9      	movs	r0, #217	@ 0xd9
 800253c:	f7ff ff72 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0x22);
 8002540:	2022      	movs	r0, #34	@ 0x22
 8002542:	f7ff ff6f 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0xDA);
 8002546:	20da      	movs	r0, #218	@ 0xda
 8002548:	f7ff ff6c 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0x12);
 800254c:	2012      	movs	r0, #18
 800254e:	f7ff ff69 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0xDB);
 8002552:	20db      	movs	r0, #219	@ 0xdb
 8002554:	f7ff ff66 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0x20);
 8002558:	2020      	movs	r0, #32
 800255a:	f7ff ff63 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0x8D);
 800255e:	208d      	movs	r0, #141	@ 0x8d
 8002560:	f7ff ff60 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0x14);
 8002564:	2014      	movs	r0, #20
 8002566:	f7ff ff5d 	bl	8002424 <oled_WriteCommand>
	oled_WriteCommand(0xAF);
 800256a:	20af      	movs	r0, #175	@ 0xaf
 800256c:	f7ff ff5a 	bl	8002424 <oled_WriteCommand>
	oled_Fill(Black);
 8002570:	2000      	movs	r0, #0
 8002572:	f7ff ff6d 	bl	8002450 <oled_Fill>
	oled_UpdateScreen();
 8002576:	f7ff ff7b 	bl	8002470 <oled_UpdateScreen>
	OLED.CurrentX = 0;
 800257a:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <oled_Init+0xd4>)
 800257c:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8002580:	2000      	movs	r0, #0
 8002582:	2100      	movs	r1, #0
 8002584:	e9c2 0100 	strd	r0, r1, [r2]
	OLED.CurrentY = 0;
 8002588:	e9c2 0102 	strd	r0, r1, [r2, #8]
	OLED.Initialized = 1;
 800258c:	2001      	movs	r0, #1
 800258e:	f883 0411 	strb.w	r0, [r3, #1041]	@ 0x411
}
 8002592:	bd08      	pop	{r3, pc}
 8002594:	200000c8 	.word	0x200000c8

08002598 <oled_DrawPixel>:

void oled_DrawPixel(uint8_t x, uint8_t y, OLED_COLOR color) {
	if (x >= OLED_WIDTH || y >= OLED_HEIGHT) {
 8002598:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800259c:	d126      	bne.n	80025ec <oled_DrawPixel+0x54>
 800259e:	293f      	cmp	r1, #63	@ 0x3f
 80025a0:	d824      	bhi.n	80025ec <oled_DrawPixel+0x54>
void oled_DrawPixel(uint8_t x, uint8_t y, OLED_COLOR color) {
 80025a2:	b410      	push	{r4}
		return;
	}

	if (OLED.Inverted) {
 80025a4:	4b12      	ldr	r3, [pc, #72]	@ (80025f0 <oled_DrawPixel+0x58>)
 80025a6:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 80025aa:	b113      	cbz	r3, 80025b2 <oled_DrawPixel+0x1a>
		color = (OLED_COLOR)!color;
 80025ac:	fab2 f282 	clz	r2, r2
 80025b0:	0952      	lsrs	r2, r2, #5
	}

	if (color == White) {
 80025b2:	2a01      	cmp	r2, #1
 80025b4:	d00f      	beq.n	80025d6 <oled_DrawPixel+0x3e>
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
	} else {
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] &= ~(1 << (y % 8));
 80025b6:	08cb      	lsrs	r3, r1, #3
 80025b8:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80025bc:	4c0c      	ldr	r4, [pc, #48]	@ (80025f0 <oled_DrawPixel+0x58>)
 80025be:	5c22      	ldrb	r2, [r4, r0]
 80025c0:	f001 0107 	and.w	r1, r1, #7
 80025c4:	2301      	movs	r3, #1
 80025c6:	408b      	lsls	r3, r1
 80025c8:	43db      	mvns	r3, r3
 80025ca:	b25b      	sxtb	r3, r3
 80025cc:	4013      	ands	r3, r2
 80025ce:	5423      	strb	r3, [r4, r0]
	}
}
 80025d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025d4:	4770      	bx	lr
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
 80025d6:	08cb      	lsrs	r3, r1, #3
 80025d8:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80025dc:	4c04      	ldr	r4, [pc, #16]	@ (80025f0 <oled_DrawPixel+0x58>)
 80025de:	5c23      	ldrb	r3, [r4, r0]
 80025e0:	f001 0107 	and.w	r1, r1, #7
 80025e4:	408a      	lsls	r2, r1
 80025e6:	4313      	orrs	r3, r2
 80025e8:	5423      	strb	r3, [r4, r0]
 80025ea:	e7f1      	b.n	80025d0 <oled_DrawPixel+0x38>
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	200000c8 	.word	0x200000c8

080025f4 <oled_WriteChar>:
	oled_DrawHLine(x1, x2, y1, color);
	oled_DrawHLine(x1, x2, y2, color);
	oled_DrawVLine(y1, y2, x1, color);
	oled_DrawVLine(y1, y2, x2, color);
}
char oled_WriteChar(char ch, FontDef Font, OLED_COLOR color) {
 80025f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025f8:	b083      	sub	sp, #12
 80025fa:	4682      	mov	sl, r0
 80025fc:	a802      	add	r0, sp, #8
 80025fe:	e900 0006 	stmdb	r0, {r1, r2}
 8002602:	4698      	mov	r8, r3
	uint32_t i, b, j;

	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 8002604:	4a30      	ldr	r2, [pc, #192]	@ (80026c8 <oled_WriteChar+0xd4>)
 8002606:	f8d2 3400 	ldr.w	r3, [r2, #1024]	@ 0x400
 800260a:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 800260e:	f89d 6000 	ldrb.w	r6, [sp]
 8002612:	199b      	adds	r3, r3, r6
 8002614:	f142 0200 	adc.w	r2, r2, #0
 8002618:	2b80      	cmp	r3, #128	@ 0x80
 800261a:	f172 0200 	sbcs.w	r2, r2, #0
 800261e:	da4f      	bge.n	80026c0 <oled_WriteChar+0xcc>
 8002620:	46b3      	mov	fp, r6
			OLED_HEIGHT <= (OLED.CurrentY + Font.FontHeight)) {
 8002622:	4a2a      	ldr	r2, [pc, #168]	@ (80026cc <oled_WriteChar+0xd8>)
 8002624:	6893      	ldr	r3, [r2, #8]
 8002626:	68d2      	ldr	r2, [r2, #12]
 8002628:	f89d 9001 	ldrb.w	r9, [sp, #1]
 800262c:	eb13 0309 	adds.w	r3, r3, r9
 8002630:	f142 0200 	adc.w	r2, r2, #0
	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 8002634:	2b40      	cmp	r3, #64	@ 0x40
 8002636:	f172 0200 	sbcs.w	r2, r2, #0
 800263a:	da43      	bge.n	80026c4 <oled_WriteChar+0xd0>
		return 0;
	}

	for (i = 0; i < Font.FontHeight; i++) {
 800263c:	2500      	movs	r5, #0
 800263e:	e023      	b.n	8002688 <oled_WriteChar+0x94>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
		for (j = 0; j < Font.FontWidth; j++) {
			if ((b << j) & 0x8000) {
				oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR) color);
			} else {
				oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR)!color);
 8002640:	4b21      	ldr	r3, [pc, #132]	@ (80026c8 <oled_WriteChar+0xd4>)
 8002642:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 8002646:	f8d3 1408 	ldr.w	r1, [r3, #1032]	@ 0x408
 800264a:	4429      	add	r1, r5
 800264c:	4420      	add	r0, r4
 800264e:	fab8 f288 	clz	r2, r8
 8002652:	0952      	lsrs	r2, r2, #5
 8002654:	b2c9      	uxtb	r1, r1
 8002656:	b2c0      	uxtb	r0, r0
 8002658:	f7ff ff9e 	bl	8002598 <oled_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++) {
 800265c:	3401      	adds	r4, #1
 800265e:	42a6      	cmp	r6, r4
 8002660:	d911      	bls.n	8002686 <oled_WriteChar+0x92>
			if ((b << j) & 0x8000) {
 8002662:	fa07 f304 	lsl.w	r3, r7, r4
 8002666:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800266a:	d0e9      	beq.n	8002640 <oled_WriteChar+0x4c>
				oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR) color);
 800266c:	4b16      	ldr	r3, [pc, #88]	@ (80026c8 <oled_WriteChar+0xd4>)
 800266e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 8002672:	f8d3 1408 	ldr.w	r1, [r3, #1032]	@ 0x408
 8002676:	4429      	add	r1, r5
 8002678:	4420      	add	r0, r4
 800267a:	4642      	mov	r2, r8
 800267c:	b2c9      	uxtb	r1, r1
 800267e:	b2c0      	uxtb	r0, r0
 8002680:	f7ff ff8a 	bl	8002598 <oled_DrawPixel>
 8002684:	e7ea      	b.n	800265c <oled_WriteChar+0x68>
	for (i = 0; i < Font.FontHeight; i++) {
 8002686:	3501      	adds	r5, #1
 8002688:	45a9      	cmp	r9, r5
 800268a:	d908      	bls.n	800269e <oled_WriteChar+0xaa>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 800268c:	f1aa 0320 	sub.w	r3, sl, #32
 8002690:	fb09 5303 	mla	r3, r9, r3, r5
 8002694:	9a01      	ldr	r2, [sp, #4]
 8002696:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
		for (j = 0; j < Font.FontWidth; j++) {
 800269a:	2400      	movs	r4, #0
 800269c:	e7df      	b.n	800265e <oled_WriteChar+0x6a>
			}
		}
	}

	OLED.CurrentX += Font.FontWidth;
 800269e:	490a      	ldr	r1, [pc, #40]	@ (80026c8 <oled_WriteChar+0xd4>)
 80026a0:	f8d1 3400 	ldr.w	r3, [r1, #1024]	@ 0x400
 80026a4:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 80026a8:	eb1b 0303 	adds.w	r3, fp, r3
 80026ac:	f142 0200 	adc.w	r2, r2, #0
 80026b0:	f8c1 3400 	str.w	r3, [r1, #1024]	@ 0x400
 80026b4:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404

	return ch;
 80026b8:	4650      	mov	r0, sl
}
 80026ba:	b003      	add	sp, #12
 80026bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
 80026c0:	2000      	movs	r0, #0
 80026c2:	e7fa      	b.n	80026ba <oled_WriteChar+0xc6>
 80026c4:	2000      	movs	r0, #0
 80026c6:	e7f8      	b.n	80026ba <oled_WriteChar+0xc6>
 80026c8:	200000c8 	.word	0x200000c8
 80026cc:	200004c8 	.word	0x200004c8

080026d0 <oled_WriteString>:
    return;
  }
  oled_SetCursor(0, OLED.CurrentY + Font.FontHeight + OLED_STRING_SPACE);
}

char oled_WriteString(char* str, FontDef Font, OLED_COLOR color) {
 80026d0:	b530      	push	{r4, r5, lr}
 80026d2:	b083      	sub	sp, #12
 80026d4:	4604      	mov	r4, r0
 80026d6:	a802      	add	r0, sp, #8
 80026d8:	e900 0006 	stmdb	r0, {r1, r2}
 80026dc:	461d      	mov	r5, r3
	while (*str) {
 80026de:	e000      	b.n	80026e2 <oled_WriteString+0x12>
		if (oled_WriteChar(*str, Font, color) != *str) {
			return *str;
		}
		str++;
 80026e0:	3401      	adds	r4, #1
	while (*str) {
 80026e2:	7820      	ldrb	r0, [r4, #0]
 80026e4:	b148      	cbz	r0, 80026fa <oled_WriteString+0x2a>
		if (oled_WriteChar(*str, Font, color) != *str) {
 80026e6:	462b      	mov	r3, r5
 80026e8:	aa02      	add	r2, sp, #8
 80026ea:	e912 0006 	ldmdb	r2, {r1, r2}
 80026ee:	f7ff ff81 	bl	80025f4 <oled_WriteChar>
 80026f2:	4602      	mov	r2, r0
 80026f4:	7820      	ldrb	r0, [r4, #0]
 80026f6:	4282      	cmp	r2, r0
 80026f8:	d0f2      	beq.n	80026e0 <oled_WriteString+0x10>
	}
	return *str;
}
 80026fa:	b003      	add	sp, #12
 80026fc:	bd30      	pop	{r4, r5, pc}
	...

08002700 <oled_SetCursor>:

void oled_SetCursor(uint8_t x, uint8_t y) {
 8002700:	b410      	push	{r4}
	OLED.CurrentX = x;
 8002702:	4c06      	ldr	r4, [pc, #24]	@ (800271c <oled_SetCursor+0x1c>)
 8002704:	2200      	movs	r2, #0
 8002706:	f8c4 0400 	str.w	r0, [r4, #1024]	@ 0x400
 800270a:	f8c4 2404 	str.w	r2, [r4, #1028]	@ 0x404
	OLED.CurrentY = y;
 800270e:	f8c4 1408 	str.w	r1, [r4, #1032]	@ 0x408
 8002712:	f8c4 240c 	str.w	r2, [r4, #1036]	@ 0x40c
}
 8002716:	f85d 4b04 	ldr.w	r4, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	200000c8 	.word	0x200000c8

08002720 <oled_NextLine>:
void oled_NextLine(FontDef Font) {
 8002720:	b500      	push	{lr}
 8002722:	b083      	sub	sp, #12
 8002724:	ab02      	add	r3, sp, #8
 8002726:	e903 0003 	stmdb	r3, {r0, r1}
  if(OLED_HEIGHT <= (OLED.CurrentY + Font.FontHeight*2 + OLED_STRING_SPACE)) {
 800272a:	4b0c      	ldr	r3, [pc, #48]	@ (800275c <oled_NextLine+0x3c>)
 800272c:	6898      	ldr	r0, [r3, #8]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8002734:	004a      	lsls	r2, r1, #1
 8002736:	1882      	adds	r2, r0, r2
 8002738:	f143 0300 	adc.w	r3, r3, #0
 800273c:	2a3d      	cmp	r2, #61	@ 0x3d
 800273e:	f173 0300 	sbcs.w	r3, r3, #0
 8002742:	db02      	blt.n	800274a <oled_NextLine+0x2a>
}
 8002744:	b003      	add	sp, #12
 8002746:	f85d fb04 	ldr.w	pc, [sp], #4
  oled_SetCursor(0, OLED.CurrentY + Font.FontHeight + OLED_STRING_SPACE);
 800274a:	4401      	add	r1, r0
 800274c:	b2c9      	uxtb	r1, r1
 800274e:	3103      	adds	r1, #3
 8002750:	b2c9      	uxtb	r1, r1
 8002752:	2000      	movs	r0, #0
 8002754:	f7ff ffd4 	bl	8002700 <oled_SetCursor>
 8002758:	e7f4      	b.n	8002744 <oled_NextLine+0x24>
 800275a:	bf00      	nop
 800275c:	200004c8 	.word	0x200004c8

08002760 <PCA9538_Read_Register>:
#include "main.h"
#include "i2c.h"
#include "sdk_uart.h"
#include "pca9538.h"

HAL_StatusTypeDef PCA9538_Read_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 8002760:	b500      	push	{lr}
 8002762:	b085      	sub	sp, #20
	return HAL_I2C_Mem_Read(&hi2c1, addr | 1, reg, 1, buf, 1, 100);
 8002764:	2364      	movs	r3, #100	@ 0x64
 8002766:	9302      	str	r3, [sp, #8]
 8002768:	2301      	movs	r3, #1
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	9200      	str	r2, [sp, #0]
 800276e:	460a      	mov	r2, r1
 8002770:	ea40 0103 	orr.w	r1, r0, r3
 8002774:	4802      	ldr	r0, [pc, #8]	@ (8002780 <PCA9538_Read_Register+0x20>)
 8002776:	f7fe fc4d 	bl	8001014 <HAL_I2C_Mem_Read>
}
 800277a:	b005      	add	sp, #20
 800277c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002780:	20000070 	.word	0x20000070

08002784 <PCA9538_Write_Register>:


HAL_StatusTypeDef PCA9538_Write_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 8002784:	b500      	push	{lr}
 8002786:	b085      	sub	sp, #20
	return HAL_I2C_Mem_Write(&hi2c1, addr & 0xFFFE, reg, 1, buf, 1, 100);
 8002788:	f020 0001 	bic.w	r0, r0, #1
 800278c:	2364      	movs	r3, #100	@ 0x64
 800278e:	9302      	str	r3, [sp, #8]
 8002790:	2301      	movs	r3, #1
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	9200      	str	r2, [sp, #0]
 8002796:	460a      	mov	r2, r1
 8002798:	4601      	mov	r1, r0
 800279a:	4803      	ldr	r0, [pc, #12]	@ (80027a8 <PCA9538_Write_Register+0x24>)
 800279c:	f7fe fb88 	bl	8000eb0 <HAL_I2C_Mem_Write>
}
 80027a0:	b005      	add	sp, #20
 80027a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80027a6:	bf00      	nop
 80027a8:	20000070 	.word	0x20000070

080027ac <PCA9538_Read_Inputs>:
	}

	return ret;
}

HAL_StatusTypeDef PCA9538_Read_Inputs(uint16_t addr, uint8_t* buf) {
 80027ac:	b508      	push	{r3, lr}
 80027ae:	460a      	mov	r2, r1
	return PCA9538_Read_Register(addr, INPUT_PORT, buf);
 80027b0:	2100      	movs	r1, #0
 80027b2:	f7ff ffd5 	bl	8002760 <PCA9538_Read_Register>
}
 80027b6:	bd08      	pop	{r3, pc}

080027b8 <UART_Transmit>:
#include "sdk_uart.h"
#include "usart.h"
#include <string.h>


void UART_Transmit(uint8_t data[]){
 80027b8:	b510      	push	{r4, lr}
 80027ba:	4604      	mov	r4, r0
	HAL_UART_Transmit(&huart6, data, strlen((const char*)data), 1000);
 80027bc:	f7fd fd04 	bl	80001c8 <strlen>
 80027c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027c4:	b282      	uxth	r2, r0
 80027c6:	4621      	mov	r1, r4
 80027c8:	4801      	ldr	r0, [pc, #4]	@ (80027d0 <UART_Transmit+0x18>)
 80027ca:	f7ff f9b4 	bl	8001b36 <HAL_UART_Transmit>
}
 80027ce:	bd10      	pop	{r4, pc}
 80027d0:	200004e0 	.word	0x200004e0

080027d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027d4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d6:	2100      	movs	r1, #0
 80027d8:	9100      	str	r1, [sp, #0]
 80027da:	4b0b      	ldr	r3, [pc, #44]	@ (8002808 <HAL_MspInit+0x34>)
 80027dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80027e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027e6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80027ea:	9200      	str	r2, [sp, #0]
 80027ec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ee:	9101      	str	r1, [sp, #4]
 80027f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027f2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80027f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002802:	b002      	add	sp, #8
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40023800 	.word	0x40023800

0800280c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800280c:	4770      	bx	lr

0800280e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800280e:	e7fe      	b.n	800280e <HardFault_Handler>

08002810 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002810:	e7fe      	b.n	8002810 <MemManage_Handler>

08002812 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002812:	e7fe      	b.n	8002812 <BusFault_Handler>

08002814 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002814:	e7fe      	b.n	8002814 <UsageFault_Handler>

08002816 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002816:	4770      	bx	lr

08002818 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002818:	4770      	bx	lr

0800281a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800281a:	4770      	bx	lr

0800281c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800281c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800281e:	f7fd fe91 	bl	8000544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002822:	bd08      	pop	{r3, pc}

08002824 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002824:	490f      	ldr	r1, [pc, #60]	@ (8002864 <SystemInit+0x40>)
 8002826:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800282a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002832:	4b0d      	ldr	r3, [pc, #52]	@ (8002868 <SystemInit+0x44>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800283c:	2000      	movs	r0, #0
 800283e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 8002846:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800284a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800284c:	4a07      	ldr	r2, [pc, #28]	@ (800286c <SystemInit+0x48>)
 800284e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002856:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002858:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800285a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800285e:	608b      	str	r3, [r1, #8]
#endif
}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	e000ed00 	.word	0xe000ed00
 8002868:	40023800 	.word	0x40023800
 800286c:	24003010 	.word	0x24003010

08002870 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002870:	b508      	push	{r3, lr}
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002872:	480a      	ldr	r0, [pc, #40]	@ (800289c <MX_USART6_UART_Init+0x2c>)
 8002874:	4b0a      	ldr	r3, [pc, #40]	@ (80028a0 <MX_USART6_UART_Init+0x30>)
 8002876:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 115200;
 8002878:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800287c:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800287e:	2300      	movs	r3, #0
 8002880:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002882:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002884:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002886:	220c      	movs	r2, #12
 8002888:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800288a:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800288c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800288e:	f7ff f923 	bl	8001ad8 <HAL_UART_Init>
 8002892:	b900      	cbnz	r0, 8002896 <MX_USART6_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002894:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002896:	f7ff fdc3 	bl	8002420 <Error_Handler>
}
 800289a:	e7fb      	b.n	8002894 <MX_USART6_UART_Init+0x24>
 800289c:	200004e0 	.word	0x200004e0
 80028a0:	40011400 	.word	0x40011400

080028a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028a4:	b500      	push	{lr}
 80028a6:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a8:	2300      	movs	r3, #0
 80028aa:	9303      	str	r3, [sp, #12]
 80028ac:	9304      	str	r3, [sp, #16]
 80028ae:	9305      	str	r3, [sp, #20]
 80028b0:	9306      	str	r3, [sp, #24]
 80028b2:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART6)
 80028b4:	6802      	ldr	r2, [r0, #0]
 80028b6:	4b15      	ldr	r3, [pc, #84]	@ (800290c <HAL_UART_MspInit+0x68>)
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d002      	beq.n	80028c2 <HAL_UART_MspInit+0x1e>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80028bc:	b009      	add	sp, #36	@ 0x24
 80028be:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART6_CLK_ENABLE();
 80028c2:	2100      	movs	r1, #0
 80028c4:	9101      	str	r1, [sp, #4]
 80028c6:	f503 3392 	add.w	r3, r3, #74752	@ 0x12400
 80028ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028cc:	f042 0220 	orr.w	r2, r2, #32
 80028d0:	645a      	str	r2, [r3, #68]	@ 0x44
 80028d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028d4:	f002 0220 	and.w	r2, r2, #32
 80028d8:	9201      	str	r2, [sp, #4]
 80028da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028dc:	9102      	str	r1, [sp, #8]
 80028de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028e0:	f042 0204 	orr.w	r2, r2, #4
 80028e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80028e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	9302      	str	r3, [sp, #8]
 80028ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028f0:	23c0      	movs	r3, #192	@ 0xc0
 80028f2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f8:	2303      	movs	r3, #3
 80028fa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80028fc:	2308      	movs	r3, #8
 80028fe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002900:	a903      	add	r1, sp, #12
 8002902:	4803      	ldr	r0, [pc, #12]	@ (8002910 <HAL_UART_MspInit+0x6c>)
 8002904:	f7fd feae 	bl	8000664 <HAL_GPIO_Init>
}
 8002908:	e7d8      	b.n	80028bc <HAL_UART_MspInit+0x18>
 800290a:	bf00      	nop
 800290c:	40011400 	.word	0x40011400
 8002910:	40020800 	.word	0x40020800

08002914 <Reset_Handler>:
 8002914:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800294c <LoopFillZerobss+0x14>
 8002918:	2100      	movs	r1, #0
 800291a:	e003      	b.n	8002924 <LoopCopyDataInit>

0800291c <CopyDataInit>:
 800291c:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <LoopFillZerobss+0x18>)
 800291e:	585b      	ldr	r3, [r3, r1]
 8002920:	5043      	str	r3, [r0, r1]
 8002922:	3104      	adds	r1, #4

08002924 <LoopCopyDataInit>:
 8002924:	480b      	ldr	r0, [pc, #44]	@ (8002954 <LoopFillZerobss+0x1c>)
 8002926:	4b0c      	ldr	r3, [pc, #48]	@ (8002958 <LoopFillZerobss+0x20>)
 8002928:	1842      	adds	r2, r0, r1
 800292a:	429a      	cmp	r2, r3
 800292c:	d3f6      	bcc.n	800291c <CopyDataInit>
 800292e:	4a0b      	ldr	r2, [pc, #44]	@ (800295c <LoopFillZerobss+0x24>)
 8002930:	e002      	b.n	8002938 <LoopFillZerobss>

08002932 <FillZerobss>:
 8002932:	2300      	movs	r3, #0
 8002934:	f842 3b04 	str.w	r3, [r2], #4

08002938 <LoopFillZerobss>:
 8002938:	4b09      	ldr	r3, [pc, #36]	@ (8002960 <LoopFillZerobss+0x28>)
 800293a:	429a      	cmp	r2, r3
 800293c:	d3f9      	bcc.n	8002932 <FillZerobss>
 800293e:	f7ff ff71 	bl	8002824 <SystemInit>
 8002942:	f000 f875 	bl	8002a30 <__libc_init_array>
 8002946:	f7ff fd17 	bl	8002378 <main>
 800294a:	4770      	bx	lr
 800294c:	20020000 	.word	0x20020000
 8002950:	080054dc 	.word	0x080054dc
 8002954:	20000000 	.word	0x20000000
 8002958:	2000004c 	.word	0x2000004c
 800295c:	20000050 	.word	0x20000050
 8002960:	20000524 	.word	0x20000524

08002964 <ADC_IRQHandler>:
 8002964:	e7fe      	b.n	8002964 <ADC_IRQHandler>

08002966 <__itoa>:
 8002966:	1e93      	subs	r3, r2, #2
 8002968:	2b22      	cmp	r3, #34	@ 0x22
 800296a:	b510      	push	{r4, lr}
 800296c:	460c      	mov	r4, r1
 800296e:	d904      	bls.n	800297a <__itoa+0x14>
 8002970:	2300      	movs	r3, #0
 8002972:	700b      	strb	r3, [r1, #0]
 8002974:	461c      	mov	r4, r3
 8002976:	4620      	mov	r0, r4
 8002978:	bd10      	pop	{r4, pc}
 800297a:	2a0a      	cmp	r2, #10
 800297c:	d109      	bne.n	8002992 <__itoa+0x2c>
 800297e:	2800      	cmp	r0, #0
 8002980:	da07      	bge.n	8002992 <__itoa+0x2c>
 8002982:	232d      	movs	r3, #45	@ 0x2d
 8002984:	700b      	strb	r3, [r1, #0]
 8002986:	4240      	negs	r0, r0
 8002988:	2101      	movs	r1, #1
 800298a:	4421      	add	r1, r4
 800298c:	f000 f806 	bl	800299c <__utoa>
 8002990:	e7f1      	b.n	8002976 <__itoa+0x10>
 8002992:	2100      	movs	r1, #0
 8002994:	e7f9      	b.n	800298a <__itoa+0x24>

08002996 <itoa>:
 8002996:	f7ff bfe6 	b.w	8002966 <__itoa>
	...

0800299c <__utoa>:
 800299c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800299e:	4c1f      	ldr	r4, [pc, #124]	@ (8002a1c <__utoa+0x80>)
 80029a0:	b08b      	sub	sp, #44	@ 0x2c
 80029a2:	4605      	mov	r5, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	466e      	mov	r6, sp
 80029a8:	f104 0c20 	add.w	ip, r4, #32
 80029ac:	6820      	ldr	r0, [r4, #0]
 80029ae:	6861      	ldr	r1, [r4, #4]
 80029b0:	4637      	mov	r7, r6
 80029b2:	c703      	stmia	r7!, {r0, r1}
 80029b4:	3408      	adds	r4, #8
 80029b6:	4564      	cmp	r4, ip
 80029b8:	463e      	mov	r6, r7
 80029ba:	d1f7      	bne.n	80029ac <__utoa+0x10>
 80029bc:	7921      	ldrb	r1, [r4, #4]
 80029be:	7139      	strb	r1, [r7, #4]
 80029c0:	1e91      	subs	r1, r2, #2
 80029c2:	6820      	ldr	r0, [r4, #0]
 80029c4:	6038      	str	r0, [r7, #0]
 80029c6:	2922      	cmp	r1, #34	@ 0x22
 80029c8:	f04f 0100 	mov.w	r1, #0
 80029cc:	d904      	bls.n	80029d8 <__utoa+0x3c>
 80029ce:	7019      	strb	r1, [r3, #0]
 80029d0:	460b      	mov	r3, r1
 80029d2:	4618      	mov	r0, r3
 80029d4:	b00b      	add	sp, #44	@ 0x2c
 80029d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029d8:	1e58      	subs	r0, r3, #1
 80029da:	4684      	mov	ip, r0
 80029dc:	fbb5 f7f2 	udiv	r7, r5, r2
 80029e0:	fb02 5617 	mls	r6, r2, r7, r5
 80029e4:	3628      	adds	r6, #40	@ 0x28
 80029e6:	446e      	add	r6, sp
 80029e8:	460c      	mov	r4, r1
 80029ea:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80029ee:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80029f2:	462e      	mov	r6, r5
 80029f4:	42b2      	cmp	r2, r6
 80029f6:	f101 0101 	add.w	r1, r1, #1
 80029fa:	463d      	mov	r5, r7
 80029fc:	d9ee      	bls.n	80029dc <__utoa+0x40>
 80029fe:	2200      	movs	r2, #0
 8002a00:	545a      	strb	r2, [r3, r1]
 8002a02:	1919      	adds	r1, r3, r4
 8002a04:	1aa5      	subs	r5, r4, r2
 8002a06:	42aa      	cmp	r2, r5
 8002a08:	dae3      	bge.n	80029d2 <__utoa+0x36>
 8002a0a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002a0e:	780e      	ldrb	r6, [r1, #0]
 8002a10:	7006      	strb	r6, [r0, #0]
 8002a12:	3201      	adds	r2, #1
 8002a14:	f801 5901 	strb.w	r5, [r1], #-1
 8002a18:	e7f4      	b.n	8002a04 <__utoa+0x68>
 8002a1a:	bf00      	nop
 8002a1c:	080054a5 	.word	0x080054a5

08002a20 <memset>:
 8002a20:	4402      	add	r2, r0
 8002a22:	4603      	mov	r3, r0
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d100      	bne.n	8002a2a <memset+0xa>
 8002a28:	4770      	bx	lr
 8002a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a2e:	e7f9      	b.n	8002a24 <memset+0x4>

08002a30 <__libc_init_array>:
 8002a30:	b570      	push	{r4, r5, r6, lr}
 8002a32:	4d0d      	ldr	r5, [pc, #52]	@ (8002a68 <__libc_init_array+0x38>)
 8002a34:	4c0d      	ldr	r4, [pc, #52]	@ (8002a6c <__libc_init_array+0x3c>)
 8002a36:	1b64      	subs	r4, r4, r5
 8002a38:	10a4      	asrs	r4, r4, #2
 8002a3a:	2600      	movs	r6, #0
 8002a3c:	42a6      	cmp	r6, r4
 8002a3e:	d109      	bne.n	8002a54 <__libc_init_array+0x24>
 8002a40:	4d0b      	ldr	r5, [pc, #44]	@ (8002a70 <__libc_init_array+0x40>)
 8002a42:	4c0c      	ldr	r4, [pc, #48]	@ (8002a74 <__libc_init_array+0x44>)
 8002a44:	f000 f818 	bl	8002a78 <_init>
 8002a48:	1b64      	subs	r4, r4, r5
 8002a4a:	10a4      	asrs	r4, r4, #2
 8002a4c:	2600      	movs	r6, #0
 8002a4e:	42a6      	cmp	r6, r4
 8002a50:	d105      	bne.n	8002a5e <__libc_init_array+0x2e>
 8002a52:	bd70      	pop	{r4, r5, r6, pc}
 8002a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a58:	4798      	blx	r3
 8002a5a:	3601      	adds	r6, #1
 8002a5c:	e7ee      	b.n	8002a3c <__libc_init_array+0xc>
 8002a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a62:	4798      	blx	r3
 8002a64:	3601      	adds	r6, #1
 8002a66:	e7f2      	b.n	8002a4e <__libc_init_array+0x1e>
 8002a68:	080054d4 	.word	0x080054d4
 8002a6c:	080054d4 	.word	0x080054d4
 8002a70:	080054d4 	.word	0x080054d4
 8002a74:	080054d8 	.word	0x080054d8

08002a78 <_init>:
 8002a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7a:	bf00      	nop
 8002a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a7e:	bc08      	pop	{r3}
 8002a80:	469e      	mov	lr, r3
 8002a82:	4770      	bx	lr

08002a84 <_fini>:
 8002a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a86:	bf00      	nop
 8002a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a8a:	bc08      	pop	{r3}
 8002a8c:	469e      	mov	lr, r3
 8002a8e:	4770      	bx	lr
